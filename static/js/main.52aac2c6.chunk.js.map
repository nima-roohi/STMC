{"version":3,"sources":["pgHome.js","doi.svg","bibtex.svg","cmpErrorMessage.js","pgPublications.js","cmpDtmcLtl.js","pgBenchmarks.js","pgDownload.js","github.svg","serviceWorker.js","index.js","App.js","non-stratified.gif","stratified.gif"],"names":["Home","render","react_default","a","createElement","Typography","component","style","padding","align","gutterBottom","Link","RouterLink","to","ExpansionPanel","key","defaultExpanded","TransitionProps","unmountOnExit","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","id","backgroundColor","ExpansionPanelDetails","mjax","margin","Grid","container","spacing","direction","alignItems","justify","item","src","process","alt","width","Component","fml","lib_default","Context","input","Node","inline","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","d","stroke","fill","fillRule","doi_SvgDoi","_ref","svgRef","props","height","viewBox","ref","ForwardRef","forwardRef","__webpack_require__","p","bibtex_extends","bibtex_objectWithoutProperties","bibtex_objectWithoutPropertiesLoose","bibtex_ref2","xlinkHref","bibtex_SvgBibtex","bibtex_ForwardRef","mkErrMsgStyles","makeStyles","theme","error","palette","dark","icon","fontSize","iconVariant","opacity","marginRight","message","display","ErrorMessage","classes","msg","extra","SnackbarContent","className","clsx","paddingTop","paddingBottom","marginBottom","Error_default","Doi","_React$useState","React","useState","value","doi","slicedToArray","Tooltip","title","IconButton","size","disableFocusRipple","onClick","window","open","startsWith","BibRecord","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","isLoading","addr","record","undefined","_this2","fetch","then","response","ok","Error","statusText","r","text","setState","valign","CircularProgress","DialogContent","overflowX","whiteSpace","wordWrap","BibTex","_React$useState3","_React$useState5","_React$useState6","opened","setOpen","Dialog","fullWidth","maxWidth","onClose","pgPublications_BibRecord","Publications","_this3","transform","paper","index","name","authors","address","bib","bibtex","trim","endsWith","papers","failedMsg","toString","map","_this4","json","js","catch","e","draw","that","canvas","current","scaleBars","Math","ceil","ctx","getContext","scaleX","scale","save","rect","x0","y0","clip","lineWidth","font","x","rectX0","maxStrataHeight","addHorizontalText","y","translate","fillText","restore","highestBar","addBar","err","err2","fillRect","barWidth","strokeRect","beginPath","moveTo","lineTo","rotate","PI","fillStyle","textAlign","textBaseline","nFontSize","valStr","val","kind","toFixed","count","value2str","max","measureText","includes","parts","split","base","power","w","strokeStyle","data","MTBDD","Sparse","Hybrid","Explicit","SPRT","GLRT","Antithetic","hasStrata4096","addStrataBarIfDefined","substring","hasStrata2","hasStrata16","hasStrata256","straXbegin","straX2begin","straX2end","barSep","straX16begin","straX16end","straX256begin","straX256end","straX4096begin","straX4096end","straXend","globalCompositeOperation","rectY1","addVerticalText","Graph","createRef","offsetX","offsetY","initScaleBar","minScaleBars","animationFrames","closure","h","needMore","pow","console","warn","initScaleBars","requestAnimationFrame","Benchmarks","rows","results","result","params","first","k","push","spaced","replace","n","shift","s1","times","s2","samples","w1","w2","description","note","appBar","info","variant","AppBar","position","dangerouslySetInnerHTML","__html","Card","marginTop","flexBasis","color","marginLeft","cmpDtmcLtl_Graph","lineHeight","cells","row","zeroMinWidth","unshift","xs","file","type","link","rel","href","link_name","cmpDtmcLtl_Benchmarks","files","Download","github_extends","github_objectWithoutProperties","github_objectWithoutPropertiesLoose","github_ref2","github_SvgGithub","github_ForwardRef","Boolean","location","hostname","match","ReactDOM","react_router_dom","Fragment","Box","md","logo1","draggable","onDragStart","preventDefault","logo2","Toolbar","flexGrow","react_router","path","Tabs","pathname","indicatorColor","textColor","centered","Tab","label","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.52aac2c6.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport MathJax from 'react-mathjax2';\n\nexport default class Home extends Component {\n\n  render = () => {\n    return (\n  <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n    <Typography component=\"div\" align=\"justify\" gutterBottom>\n      Statistical verification of temporal properties has received increasing attention during the past decade. \n      Compared to the symbolic approach, statistical model checkers are usually more scalable to large-scale \n      real-world problems with complicated stochastic behavior. The general idea of statistical verification \n      is to treat the problem of checking a temporal formula on a probabilistic system as a hypothesis testing \n      problem. By drawing sample behaviors from the underlying probabilistic system, the satisfaction of the \n      specification can be inferred with high confidence.\n    </Typography>\n    <Typography component=\"div\" align=\"justify\" gutterBottom>\n      Most statistical model checking algorithms crucially rely on independent Monte Carlo sampling. Specifically, the underlying \n      probabilistic system is <em>simulated</em> to generate a sample path, and a new sample is drawn in the same manner in each \n      round. Consequently, the samples are independent and identically distributed (i.i.d.).\n      In STMC, we consider two different sampling techniques: <em>stratified</em> and <em>antithetic</em>.\n      In our experiment, these two techniques can significantly reduce the number of samples as examples\n      in our <Link component={RouterLink} to=\"/benchmarks\">benchmarks</Link> page shows.\n    </Typography>\n\n    <ExpansionPanel key='1' defaultExpanded={true} TransitionProps={{ unmountOnExit: false }}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\" style={{ backgroundColor: '#EEEEEE' }}>\n          <Typography><b>Stratified Sampling</b></Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography component=\"div\">\n            <Typography component=\"div\" align=\"justify\" gutterBottom>\n              Stratified sampling is an approach to generate negatively correlated random variables. \n              By choosing a proper representation of the Markov chain {mjax('M')}, the stratified sampling technique can be applied to generate \n              semantically negatively correlated sample paths, reducing the sampling cost for statistically verifying a fraction of temporal \n              formulas.\n            </Typography>\n            <Typography component=\"div\" align=\"justify\" gutterBottom>\n              The stratified sampling algorithm generates {mjax('m')} sample paths simultaneously. \n              Let {mjax('[0,1)=[0,\\\\frac{1}{m}]\\\\cup\\\\cdots\\\\cup[\\\\frac{m-1}{m},1)')} be a partition of {mjax('[0,1)')}. \n              At each time {mjax('t')}, a sample is drawn from each sub-interval.\n              To avoid correlation between steps, we first generate a uniformly random \n              permutation {mjax('\\\\pi')} on {mjax('\\\\{0,\\\\ldots,n-1\\\\}')} at every step, and then assign the \n              sub-interval {mjax('[\\\\frac{\\\\pi(i)}{m},\\\\frac{\\\\pi(i)+1}{m})')} to the {mjax('i')}-th path.\n              The random seeds of the {mjax('m')}-stratified sample paths are repellent to each other at each time {mjax('t')}, \n              as no more than one of them can occupy the same sub-interval.\n              Therefore, these sample paths are repellent to each other at each time {mjax('t')}, in the sense that the probability \n              of any two of them visiting the same state of the Markov chain is no more than (and usually less than) that of two \n              independent samples. \n              The approach summarized in the following algorithm.\n            </Typography>\n            <Typography gutterBottom>&nbsp;</Typography>\n            <Typography component=\"div\" align=\"justify\" gutterBottom style={{margin:'0px'}}>\n            <Grid container spacing={0} direction='row' alignItems='center' justify='center'>\n              <Grid item>\n                <img src={process.env.PUBLIC_URL + \"/images/fig-stratified.png\"} alt=\"Stratified Sampling Algorithm\" width='400'/>\n              </Grid>\n            </Grid>\n            </Typography>\n          </Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n\n      <ExpansionPanel key='2' defaultExpanded={true} TransitionProps={{ unmountOnExit: false }}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\" style={{ backgroundColor: '#EEEEEE' }}>\n          <Typography><b>Antithetic Sampling</b></Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography component=\"div\">\n            <Typography component=\"div\" align=\"justify\" gutterBottom>\n              Antithetic sampling is another approach to generate negatively correlated random variables. \n              The antithetic sampling technique can also be employed to generate pairs of semantically negatively correlated sample paths and \n              reduce the sampling cost for statistical verification.\n            </Typography>\n            <Typography component=\"div\" align=\"justify\" gutterBottom>\n              The antithetic sampling algorithm only generates {mjax('2')} sample paths simultaneously.\n              Starting from step {mjax('0')}, \n                the algorithm uniformly chooses a random number {mjax('d')} from the interval {mjax('[0,1)')} on even steps, and\n                uses {mjax('1-d')} as the random number on the odd steps.\n              Similar to the stratified sampling, \n                to avoid correlation between steps, we first generate a uniformly random \n                permutation {mjax('\\\\pi')} on {mjax('\\\\{0,1\\\\}')} at every step, and then assign the \n                sub-interval {mjax('[\\\\frac{\\\\pi(i)}{2},\\\\frac{\\\\pi(i)+1}{2})')} to the {mjax('i')}-th path ({mjax('i\\\\in\\\\{0,1\\\\}')}).\n              Again, similar to the stratified sampling, \n                the random seeds of the {mjax('2')}-stratified sample paths are repellent to each other at each time {mjax('t')}.\n              Therefore, these sample paths are repellent to each other at each time {mjax('t')}, in the sense that the probability \n              of any two of them visiting the same state of the Markov chain is no more than (and usually less than) that of two \n              independent samples. \n              The approach summarized in the following algorithm.\n            </Typography>\n            <Typography gutterBottom>&nbsp;</Typography>\n            <Typography component=\"div\" align=\"justify\" gutterBottom style={{margin:'0px'}}>\n            <Grid container spacing={0} direction='row' alignItems='center' justify='center'>\n              <Grid item>\n                <img src={process.env.PUBLIC_URL + \"/images/fig-antithetic.png\"} alt=\"Antithetic Sampling Algorithm\" width='275'/>\n              </Grid>\n            </Grid>\n            </Typography>\n          </Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n\n  </Typography>\n    );\n  }\n}\n\nfunction mjax(fml) {\n  return  (\n    <MathJax.Context input='tex'>\n      <MathJax.Node inline>{fml}</MathJax.Node>\n    </MathJax.Context>\n  );\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  id: \"svgg\"\n}, React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M319.763 79.787 C 317.543 80.055,315.473 80.430,315.163 80.620 C 310.960 83.197,305.424 88.947,304.784 91.400 C 304.555 92.280,303.978 94.076,303.501 95.390 C 300.550 103.535,306.687 117.572,314.266 120.009 C 315.110 120.280,316.880 120.958,318.200 121.515 C 321.657 122.974,327.153 122.972,330.600 121.510 C 331.920 120.950,333.555 120.373,334.234 120.229 C 336.141 119.822,340.467 115.963,342.692 112.682 C 344.712 109.706,344.806 109.417,345.997 102.500 C 346.621 98.872,345.012 91.426,343.113 89.158 C 339.582 84.940,338.514 83.866,336.923 82.934 C 335.975 82.378,335.200 81.767,335.200 81.576 C 335.200 80.787,325.809 78.834,324.015 79.250 C 323.897 79.277,321.983 79.519,319.763 79.787 M222.400 140.399 C 207.300 142.100,208.341 141.919,204.962 143.424 C 203.841 143.924,202.041 144.460,200.962 144.616 C 199.883 144.772,197.920 145.487,196.600 146.205 C 195.280 146.923,193.547 147.718,192.748 147.971 C 191.950 148.223,190.964 148.798,190.556 149.248 C 190.149 149.698,189.269 150.295,188.601 150.574 C 187.932 150.853,186.523 151.828,185.468 152.741 C 184.414 153.653,183.417 154.400,183.253 154.400 C 182.711 154.400,175.200 162.019,175.200 162.569 C 175.200 162.866,174.774 163.387,174.252 163.729 C 173.391 164.293,172.404 165.755,169.648 170.545 C 169.124 171.455,168.274 172.833,167.759 173.606 C 167.243 174.379,166.451 176.089,165.998 177.406 C 165.545 178.723,164.834 180.520,164.418 181.400 C 163.653 183.019,161.820 191.991,161.082 197.728 C 160.392 203.096,162.617 218.564,164.804 223.600 C 165.425 225.030,166.061 226.888,166.216 227.729 C 166.372 228.569,166.921 229.758,167.436 230.369 C 167.950 230.981,168.851 232.588,169.438 233.941 C 170.025 235.293,170.657 236.400,170.844 236.400 C 171.031 236.400,171.550 237.117,171.997 237.994 C 172.444 238.871,173.251 239.877,173.790 240.230 C 174.328 240.583,174.885 241.237,175.027 241.684 C 175.351 242.706,180.928 248.564,182.800 249.849 C 183.570 250.378,185.190 251.618,186.400 252.604 C 187.610 253.590,189.681 254.912,191.003 255.541 C 192.325 256.170,193.643 256.970,193.933 257.320 C 194.223 257.669,195.662 258.353,197.130 258.839 C 198.599 259.325,200.187 259.975,200.660 260.281 C 201.133 260.588,203.283 261.194,205.437 261.627 C 207.591 262.061,210.534 262.785,211.977 263.236 C 218.117 265.156,236.233 265.152,242.423 263.230 C 243.866 262.782,246.760 262.071,248.854 261.649 C 250.949 261.228,253.548 260.437,254.631 259.891 C 255.714 259.345,257.189 258.771,257.910 258.615 C 258.630 258.460,259.732 257.901,260.358 257.374 C 260.984 256.847,262.307 256.068,263.298 255.644 C 265.143 254.853,268.223 252.774,269.994 251.126 C 270.540 250.616,271.544 249.840,272.225 249.400 C 272.905 248.960,274.516 247.430,275.805 246.000 C 277.095 244.570,278.386 243.256,278.675 243.080 C 278.964 242.904,279.497 242.184,279.860 241.480 C 280.222 240.776,280.856 239.962,281.267 239.672 C 281.678 239.382,282.484 238.212,283.058 237.072 C 283.632 235.932,284.334 234.864,284.618 234.698 C 284.903 234.532,285.453 233.542,285.841 232.498 C 286.230 231.454,287.054 229.848,287.673 228.929 C 288.292 228.010,289.140 225.850,289.557 224.129 C 289.974 222.408,290.593 220.478,290.932 219.839 C 293.417 215.157,293.466 188.754,290.997 184.948 C 290.693 184.479,290.071 182.589,289.616 180.748 C 289.160 178.906,288.444 176.930,288.023 176.356 C 287.603 175.782,286.700 174.162,286.018 172.756 C 284.166 168.939,282.739 166.640,281.400 165.316 C 280.740 164.664,279.673 163.384,279.028 162.472 C 277.521 160.339,272.717 155.595,270.400 153.952 C 269.410 153.249,268.455 152.432,268.279 152.135 C 268.102 151.837,267.202 151.215,266.279 150.752 C 265.355 150.289,264.235 149.576,263.789 149.168 C 263.342 148.761,262.214 148.158,261.282 147.829 C 260.350 147.500,258.987 146.773,258.252 146.213 C 257.475 145.620,255.931 145.014,254.559 144.763 C 253.261 144.525,251.390 143.927,250.400 143.433 C 246.244 141.360,229.745 139.572,222.400 140.399 M307.000 144.672 C 304.668 145.018,304.800 141.597,304.800 201.696 C 304.800 261.824,304.704 259.160,306.884 259.744 C 308.593 260.202,340.592 260.031,341.952 259.557 C 344.558 258.648,344.400 262.403,344.400 201.482 L 344.400 146.124 343.558 145.362 C 342.747 144.627,311.303 144.033,307.000 144.672 M235.810 177.057 C 236.905 177.749,238.233 178.445,238.762 178.604 C 241.848 179.532,248.581 186.292,249.632 189.516 C 249.899 190.332,250.440 191.416,250.835 191.924 C 253.083 194.817,253.081 208.832,250.831 212.587 C 250.431 213.254,249.803 214.611,249.436 215.601 C 248.695 217.595,242.900 224.062,241.200 224.791 C 240.650 225.027,239.588 225.666,238.840 226.211 C 234.284 229.529,219.213 229.402,215.354 226.013 C 214.594 225.346,213.740 224.800,213.457 224.800 C 212.718 224.800,206.650 218.464,205.795 216.800 C 205.400 216.030,204.753 214.950,204.359 214.400 C 200.792 209.426,201.326 194.084,205.254 188.662 C 205.884 187.792,206.400 186.896,206.400 186.671 C 206.400 186.447,207.165 185.485,208.100 184.535 C 209.035 183.584,210.070 182.532,210.400 182.197 C 212.030 180.538,214.061 179.164,216.025 178.390 C 217.220 177.919,218.422 177.348,218.695 177.121 C 221.194 175.047,232.562 175.005,235.810 177.057 \",\n  stroke: \"none\",\n  fill: \"#fcfbf9\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path1\",\n  d: \"M118.091 78.100 C 116.894 79.568,116.804 82.315,116.802 117.456 C 116.800 150.826,116.755 153.165,116.100 153.948 L 115.400 154.785 113.600 153.401 C 110.929 151.349,106.027 148.000,105.692 147.999 C 105.532 147.999,104.380 147.305,103.133 146.458 C 101.755 145.522,100.186 144.824,99.133 144.678 C 98.180 144.546,95.990 143.976,94.266 143.412 C 86.730 140.945,71.073 141.012,66.133 143.532 C 65.280 143.968,63.724 144.452,62.676 144.609 C 61.629 144.767,60.132 145.329,59.350 145.860 C 58.568 146.390,56.819 147.360,55.464 148.014 C 50.526 150.397,44.402 154.638,40.178 158.600 C 39.240 159.480,38.231 160.400,37.936 160.644 C 37.395 161.091,35.145 163.653,32.704 166.600 C 31.975 167.480,30.976 169.035,30.483 170.056 C 29.991 171.077,29.330 172.126,29.014 172.388 C 28.699 172.650,28.232 173.525,27.976 174.332 C 27.720 175.139,27.061 176.587,26.510 177.548 C 25.960 178.510,25.007 181.210,24.393 183.548 C 23.780 185.887,22.975 188.790,22.606 190.000 C 20.975 195.350,21.431 213.000,23.347 218.653 C 23.859 220.164,24.513 222.660,24.799 224.200 C 25.086 225.740,25.924 228.140,26.661 229.533 C 27.397 230.926,28.000 232.398,28.000 232.803 C 28.000 233.207,28.424 234.047,28.943 234.669 C 29.462 235.291,30.137 236.499,30.443 237.354 C 30.749 238.209,31.413 239.289,31.918 239.754 C 32.423 240.219,33.462 241.525,34.228 242.657 C 35.956 245.209,41.202 250.262,44.172 252.234 C 45.397 253.047,46.400 253.859,46.400 254.038 C 46.400 254.216,47.207 254.720,48.193 255.156 C 49.180 255.592,50.578 256.400,51.302 256.952 C 52.025 257.504,54.143 258.435,56.008 259.021 C 57.874 259.607,59.580 260.226,59.800 260.396 C 61.060 261.374,75.798 263.001,79.600 262.583 C 87.780 261.684,91.174 261.058,93.600 260.003 C 95.030 259.381,96.944 258.675,97.853 258.433 C 98.763 258.192,99.753 257.695,100.053 257.330 C 100.354 256.964,101.680 256.148,103.000 255.517 C 104.320 254.886,105.965 253.971,106.656 253.485 C 107.347 252.998,108.427 252.285,109.056 251.900 C 111.066 250.669,112.965 249.233,114.237 247.982 C 116.112 246.139,116.549 246.982,116.816 252.961 C 116.974 256.495,117.223 258.157,117.739 259.124 L 118.445 260.448 134.923 260.316 C 152.191 260.177,152.419 260.155,153.146 258.559 C 153.775 257.179,153.799 81.489,153.170 79.686 C 152.803 78.633,152.450 78.391,150.751 78.027 C 147.746 77.382,118.622 77.448,118.091 78.100 M95.170 174.783 C 97.684 175.424,100.204 176.320,100.770 176.773 C 101.337 177.226,102.500 177.974,103.356 178.435 C 104.212 178.896,105.281 179.617,105.732 180.037 C 106.183 180.457,107.155 181.206,107.893 181.700 C 113.317 185.340,117.536 199.505,115.428 207.000 C 113.696 213.157,113.271 214.329,112.491 215.109 C 112.019 215.581,111.241 216.739,110.762 217.683 C 109.825 219.529,104.948 224.800,104.177 224.800 C 103.920 224.800,103.026 225.343,102.190 226.008 C 101.355 226.672,99.665 227.505,98.435 227.858 C 97.206 228.212,95.480 228.878,94.600 229.338 C 91.957 230.720,82.890 230.593,80.400 229.139 C 79.410 228.562,77.916 227.872,77.080 227.607 C 76.244 227.342,75.344 226.767,75.080 226.329 C 74.816 225.891,73.929 225.187,73.108 224.763 C 72.288 224.339,71.360 223.499,71.046 222.896 C 70.733 222.293,69.991 221.350,69.399 220.800 C 68.807 220.250,67.959 219.080,67.516 218.200 C 67.073 217.320,66.395 216.240,66.011 215.800 C 65.398 215.097,64.527 212.276,63.143 206.503 C 62.260 202.817,64.414 190.756,66.333 188.644 C 66.755 188.180,67.329 187.350,67.609 186.800 C 68.507 185.034,73.049 180.421,75.400 178.889 C 76.280 178.315,77.450 177.445,78.000 176.956 C 78.550 176.467,79.990 175.760,81.200 175.385 C 82.410 175.009,84.120 174.463,85.000 174.170 C 87.470 173.349,90.189 173.513,95.170 174.783 \",\n  stroke: \"none\",\n  fill: \"#261e24\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path2\",\n  d: \"M164.000 3.200 L 162.267 4.800 156.413 4.800 C 150.086 4.800,149.600 4.948,149.600 6.880 L 149.600 8.000 145.100 8.047 C 142.625 8.073,140.474 8.077,140.321 8.054 C 140.168 8.032,139.387 8.632,138.586 9.387 C 137.236 10.660,136.925 10.766,134.288 10.843 C 131.571 10.922,131.379 10.993,129.960 12.441 C 128.551 13.878,128.336 13.959,125.738 14.032 C 122.334 14.128,121.600 14.479,121.600 16.014 L 121.600 17.200 118.600 17.200 L 115.600 17.200 115.600 18.582 L 115.600 19.965 112.700 20.082 L 109.800 20.200 109.676 21.700 L 109.552 23.200 106.856 23.200 C 103.880 23.200,103.200 23.584,103.200 25.262 C 103.200 26.354,103.170 26.366,100.300 26.482 L 97.400 26.600 97.276 28.100 L 97.152 29.600 95.202 29.600 C 92.451 29.600,91.200 30.152,91.200 31.366 C 91.200 32.216,90.994 32.369,89.700 32.476 C 88.281 32.593,88.193 32.681,88.076 34.100 L 87.952 35.600 85.652 35.600 C 83.086 35.600,82.118 36.120,81.928 37.600 C 81.825 38.404,81.526 38.639,80.400 38.800 C 79.169 38.976,78.985 39.154,78.876 40.277 C 78.764 41.434,78.613 41.566,77.276 41.677 C 75.885 41.793,75.793 41.886,75.676 43.300 C 75.555 44.758,75.508 44.800,73.976 44.800 C 72.842 44.800,72.400 44.968,72.400 45.400 C 72.400 46.388,70.732 47.773,69.012 48.212 C 67.770 48.529,67.269 48.919,66.828 49.912 C 66.443 50.778,65.978 51.200,65.408 51.200 C 64.325 51.200,63.600 51.926,63.600 53.009 C 63.600 53.659,63.246 53.946,62.100 54.229 C 60.886 54.529,60.527 54.848,60.217 55.900 C 59.943 56.831,59.597 57.200,58.997 57.200 C 57.920 57.200,57.200 57.930,57.200 59.022 C 57.200 59.652,56.850 59.984,55.900 60.255 C 54.848 60.556,54.529 60.910,54.229 62.113 C 53.942 63.266,53.661 63.600,52.978 63.600 C 51.945 63.600,51.410 64.182,51.048 65.700 C 50.878 66.411,50.522 66.800,50.041 66.800 C 49.152 66.800,48.597 67.434,48.265 68.831 C 48.130 69.399,47.584 70.061,47.053 70.303 C 45.913 70.822,44.800 72.865,44.800 74.437 C 44.800 75.436,44.645 75.565,43.300 75.676 C 41.886 75.793,41.793 75.885,41.677 77.276 C 41.566 78.613,41.434 78.764,40.277 78.876 C 39.125 78.988,38.988 79.142,38.879 80.454 C 38.774 81.707,38.593 81.941,37.572 82.146 C 36.176 82.425,35.600 83.616,35.600 86.226 C 35.600 87.987,35.590 88.000,34.200 88.000 C 33.430 88.000,32.777 88.180,32.750 88.400 C 32.723 88.620,32.655 88.980,32.600 89.200 C 32.545 89.420,32.478 89.938,32.450 90.350 C 32.418 90.837,31.998 91.180,31.252 91.330 C 29.950 91.590,29.614 92.395,29.605 95.276 L 29.600 97.152 28.100 97.276 L 26.600 97.400 26.482 100.300 C 26.366 103.170,26.354 103.200,25.262 103.200 C 23.729 103.200,23.200 103.882,23.200 105.859 C 23.200 107.613,22.192 109.168,20.700 109.717 C 20.124 109.929,20.000 110.474,20.000 112.787 L 20.000 115.600 18.600 115.600 L 17.200 115.600 17.200 118.600 C 17.200 121.510,17.171 121.600,16.229 121.600 C 14.538 121.600,14.000 122.573,14.000 125.629 C 14.000 127.763,13.869 128.400,13.429 128.400 C 12.729 128.400,11.127 130.359,11.429 130.847 C 11.549 131.041,11.457 131.200,11.224 131.200 C 10.961 131.200,10.800 132.414,10.800 134.400 C 10.800 137.264,10.721 137.600,10.049 137.600 C 8.529 137.600,8.206 138.680,8.061 144.261 L 7.922 149.600 6.775 149.600 C 5.043 149.600,4.800 150.522,4.800 157.104 C 4.800 163.259,4.344 164.800,2.521 164.800 C 1.671 164.800,1.611 167.108,1.605 200.126 C 1.600 235.896,1.560 235.200,3.614 235.200 L 4.800 235.200 4.805 241.900 C 4.812 250.014,4.873 250.302,6.644 250.635 L 8.000 250.889 8.000 254.995 C 8.000 260.427,8.254 261.555,9.658 262.353 C 10.727 262.962,10.795 263.158,10.797 265.651 C 10.800 268.824,11.641 271.083,13.011 271.604 C 13.914 271.947,14.000 272.193,14.000 274.416 C 14.000 277.482,14.464 278.400,16.014 278.400 L 17.200 278.400 17.200 281.400 C 17.200 283.100,17.373 284.422,17.600 284.450 C 17.820 284.478,18.180 284.545,18.400 284.600 C 18.620 284.655,19.070 284.723,19.400 284.750 C 19.865 284.789,20.000 285.369,20.000 287.320 C 20.000 290.112,20.408 290.800,22.062 290.800 C 23.154 290.800,23.166 290.830,23.282 293.700 L 23.400 296.600 24.900 296.724 L 26.400 296.848 26.400 299.610 C 26.400 302.530,26.833 303.200,28.722 303.200 C 29.374 303.200,29.541 303.589,29.773 305.644 C 30.026 307.874,30.153 308.127,31.225 308.532 C 32.175 308.890,32.400 309.212,32.400 310.208 C 32.400 311.737,33.029 312.400,34.480 312.400 C 35.460 312.400,35.600 312.551,35.600 313.613 C 35.600 315.569,36.615 317.538,37.774 317.829 C 38.649 318.049,38.800 318.309,38.800 319.601 C 38.800 321.153,39.255 321.600,40.833 321.600 C 41.406 321.600,41.600 321.883,41.600 322.720 C 41.600 324.141,42.259 324.800,43.680 324.800 C 44.690 324.800,44.800 324.936,44.800 326.176 C 44.800 327.477,44.881 327.558,46.300 327.676 C 47.680 327.790,47.810 327.907,47.928 329.142 C 48.012 330.015,48.522 330.948,49.389 331.815 C 50.121 332.548,50.929 333.779,51.184 334.550 C 51.533 335.610,51.977 336.063,53.000 336.400 C 54.113 336.767,54.375 337.072,54.476 338.123 C 54.578 339.170,54.831 339.468,55.880 339.777 C 56.914 340.082,57.184 340.390,57.280 341.377 C 57.383 342.422,57.618 342.654,58.900 342.971 C 60.088 343.264,60.400 343.531,60.400 344.256 C 60.400 345.237,61.435 346.000,62.766 346.000 C 63.313 346.000,63.671 346.344,63.845 347.037 C 64.029 347.770,64.616 348.292,65.853 348.823 C 66.814 349.235,67.600 349.762,67.600 349.994 C 67.600 350.227,68.050 350.622,68.600 350.873 C 69.150 351.123,69.600 351.570,69.600 351.864 C 69.600 352.159,69.839 352.400,70.130 352.400 C 70.774 352.400,72.400 354.066,72.400 354.726 C 72.400 355.011,73.028 355.200,73.976 355.200 C 75.508 355.200,75.555 355.242,75.676 356.700 C 75.793 358.114,75.885 358.207,77.276 358.323 C 78.540 358.428,78.769 358.599,78.876 359.513 C 79.033 360.869,80.413 361.586,82.876 361.594 L 84.752 361.600 84.876 363.100 C 84.993 364.514,85.085 364.607,86.476 364.723 C 87.813 364.834,87.964 364.966,88.076 366.123 C 88.195 367.350,88.277 367.405,90.177 367.525 C 92.159 367.650,93.512 368.551,94.128 370.156 C 94.290 370.580,94.858 370.800,95.787 370.800 C 96.984 370.800,97.201 370.938,97.206 371.700 C 97.217 373.296,97.791 373.675,100.528 373.895 C 103.126 374.104,103.159 374.121,103.279 375.353 L 103.400 376.600 106.500 376.717 L 109.600 376.834 109.600 378.417 L 109.600 380.000 112.600 380.000 L 115.600 380.000 115.600 381.357 C 115.600 382.979,116.028 383.200,119.175 383.200 C 121.438 383.200,121.492 383.226,121.856 384.500 L 122.227 385.800 125.441 386.000 C 128.555 386.194,128.695 386.247,129.969 387.700 C 131.277 389.194,131.296 389.200,134.414 389.200 C 137.203 389.200,137.574 389.288,137.802 390.007 C 138.315 391.621,140.782 392.400,145.384 392.400 C 149.517 392.400,149.600 392.418,149.600 393.320 C 149.600 395.071,150.148 395.200,157.609 395.200 L 164.659 395.200 165.029 396.700 L 165.400 398.200 200.200 398.200 L 235.000 398.200 235.124 396.709 L 235.247 395.217 242.699 395.109 L 250.150 395.000 250.486 393.700 L 250.823 392.400 255.195 392.400 L 259.566 392.400 261.248 390.800 C 262.898 389.230,262.986 389.200,265.879 389.200 C 268.801 389.200,271.200 387.931,271.200 386.386 C 271.200 386.171,272.581 386.000,274.320 386.000 C 277.655 386.000,278.400 385.657,278.400 384.120 C 278.400 383.250,278.548 383.200,281.120 383.200 C 284.121 383.200,284.800 382.820,284.800 381.138 C 284.800 380.046,284.830 380.034,287.700 379.918 L 290.600 379.800 290.724 378.300 L 290.848 376.800 293.824 376.800 L 296.800 376.800 296.800 375.400 C 296.800 374.002,296.803 374.000,298.700 373.960 C 301.692 373.897,302.514 373.534,302.883 372.112 C 303.154 371.065,303.430 370.829,304.505 370.725 C 305.648 370.615,305.823 370.436,306.000 369.200 L 306.200 367.800 308.989 367.680 C 311.882 367.555,312.383 367.264,312.394 365.700 C 312.399 364.939,312.617 364.800,313.800 364.800 C 315.167 364.800,315.200 364.762,315.200 363.200 L 315.200 361.600 317.100 361.560 C 320.107 361.497,320.914 361.136,321.289 359.687 C 321.582 358.559,321.789 358.400,322.969 358.400 C 324.390 358.400,324.800 357.900,324.800 356.167 C 324.800 355.328,324.986 355.200,326.200 355.200 C 327.533 355.200,327.600 355.133,327.600 353.800 C 327.600 352.487,327.681 352.400,328.900 352.399 C 329.894 352.399,330.547 352.030,331.671 350.836 C 332.480 349.976,333.560 349.145,334.071 348.989 C 335.381 348.589,336.400 347.605,336.400 346.738 C 336.400 346.189,336.699 346.000,337.571 346.000 C 338.896 346.000,340.000 345.098,340.000 344.016 C 340.000 343.503,340.408 343.212,341.385 343.029 C 342.575 342.806,342.806 342.575,343.029 341.385 C 343.209 340.426,343.506 340.000,343.996 340.000 C 344.871 340.000,345.563 339.198,345.957 337.726 C 346.130 337.076,346.584 336.539,347.029 336.457 C 348.187 336.242,348.720 335.674,349.013 334.341 C 349.158 333.679,349.980 332.476,350.838 331.668 C 352.030 330.547,352.399 329.893,352.399 328.900 C 352.400 327.681,352.487 327.600,353.800 327.600 C 355.133 327.600,355.200 327.533,355.200 326.200 C 355.200 324.986,355.328 324.800,356.167 324.800 C 357.904 324.800,358.400 324.391,358.400 322.957 C 358.400 321.867,358.557 321.600,359.200 321.600 C 360.454 321.600,361.600 320.178,361.600 318.621 C 361.600 317.110,363.021 315.200,364.146 315.200 C 364.627 315.200,364.800 314.829,364.800 313.800 C 364.800 312.687,364.957 312.400,365.567 312.400 C 367.244 312.400,367.600 311.978,367.600 309.988 C 367.600 308.236,367.744 307.939,369.200 306.693 C 370.313 305.740,370.800 305.003,370.800 304.273 C 370.800 303.426,371.049 303.158,372.087 302.889 C 373.536 302.514,373.897 301.707,373.960 298.700 C 374.000 296.803,374.002 296.800,375.400 296.800 L 376.800 296.800 376.800 293.824 L 376.800 290.848 378.300 290.724 L 379.800 290.600 379.918 287.700 C 380.034 284.830,380.046 284.800,381.138 284.800 C 382.816 284.800,383.200 284.120,383.200 281.145 L 383.200 278.451 384.500 278.325 L 385.800 278.200 385.916 274.939 C 386.025 271.858,386.085 271.665,387.008 271.434 C 388.503 271.059,389.200 269.270,389.200 265.810 C 389.200 262.956,389.257 262.758,390.189 262.404 C 391.768 261.804,392.400 259.676,392.400 254.963 L 392.400 250.823 393.700 250.486 L 395.000 250.150 395.109 242.675 L 395.218 235.200 396.309 235.194 C 398.527 235.181,398.412 237.216,398.302 199.775 L 398.200 165.000 396.709 164.876 L 395.217 164.753 395.109 157.276 L 395.000 149.800 393.700 149.675 L 392.400 149.549 392.371 145.075 C 392.339 140.243,391.817 138.590,390.076 137.805 C 389.279 137.446,389.200 137.117,389.200 134.159 C 389.200 130.701,388.532 129.150,386.806 128.602 C 386.145 128.392,386.016 127.912,385.916 125.278 L 385.800 122.200 384.500 121.817 C 383.230 121.443,383.200 121.382,383.200 119.150 C 383.200 116.038,382.975 115.600,381.375 115.600 L 380.035 115.600 379.918 112.700 L 379.800 109.800 378.300 109.676 L 376.800 109.552 376.800 106.576 C 376.800 104.892,376.626 103.578,376.400 103.550 C 376.180 103.522,375.820 103.455,375.600 103.400 C 375.380 103.345,374.930 103.278,374.600 103.250 C 374.145 103.212,374.000 102.664,374.000 100.974 C 374.000 98.116,373.511 97.200,371.986 97.200 C 370.901 97.200,370.800 97.083,370.800 95.824 C 370.800 95.067,370.620 94.336,370.400 94.200 C 370.180 94.064,370.000 93.588,370.000 93.142 C 370.000 92.611,369.592 92.177,368.819 91.885 C 367.814 91.506,367.620 91.197,367.519 89.820 C 367.408 88.314,367.309 88.191,366.100 88.075 C 364.923 87.961,364.800 87.825,364.800 86.636 C 364.800 84.934,363.737 82.825,362.682 82.435 C 362.172 82.246,361.684 81.525,361.415 80.564 C 361.036 79.205,360.810 78.984,359.690 78.875 C 358.476 78.757,358.400 78.656,358.400 77.175 C 358.400 75.604,358.396 75.600,356.800 75.600 C 355.226 75.600,355.200 75.577,355.200 74.140 C 355.200 72.997,354.896 72.385,353.795 71.317 C 353.023 70.567,352.131 69.331,351.813 68.570 C 351.496 67.810,350.842 67.042,350.361 66.864 C 349.860 66.678,349.296 65.954,349.043 65.170 C 348.697 64.099,348.355 63.772,347.476 63.671 C 346.335 63.540,346.247 63.425,345.834 61.532 C 345.667 60.767,345.275 60.392,344.452 60.212 C 343.598 60.024,343.211 59.632,342.939 58.680 C 342.641 57.631,342.346 57.378,341.311 57.276 C 340.214 57.169,340.031 56.985,339.924 55.876 C 339.818 54.782,339.595 54.549,338.368 54.246 C 337.242 53.968,336.856 53.625,336.568 52.646 C 336.297 51.728,335.909 51.347,335.094 51.200 C 334.407 51.076,333.695 50.517,333.216 49.728 C 332.575 48.669,332.123 48.413,330.523 48.198 C 327.696 47.819,327.600 47.754,327.600 46.213 C 327.600 44.870,327.532 44.800,326.224 44.800 C 324.923 44.800,324.842 44.719,324.724 43.300 C 324.607 41.881,324.519 41.793,323.100 41.676 C 322.014 41.586,321.596 41.365,321.587 40.876 C 321.566 39.772,320.583 38.800,319.488 38.800 C 318.671 38.800,318.409 38.553,318.195 37.576 C 317.880 36.143,316.775 35.600,314.174 35.600 C 312.498 35.600,312.400 35.538,312.400 34.480 C 312.400 33.061,311.742 32.400,310.328 32.400 C 309.466 32.400,309.157 32.168,308.957 31.371 C 308.651 30.150,307.414 29.600,304.974 29.600 C 303.364 29.600,303.200 29.510,303.200 28.633 C 303.200 26.588,302.912 26.400,299.781 26.400 L 296.848 26.400 296.724 24.900 L 296.600 23.400 293.700 23.282 L 290.800 23.165 290.800 21.825 C 290.800 20.217,290.367 20.000,287.167 20.000 C 285.352 20.000,284.788 19.860,284.750 19.400 C 284.723 19.070,284.655 18.620,284.600 18.400 C 284.545 18.180,284.478 17.820,284.450 17.600 C 284.422 17.373,283.100 17.200,281.400 17.200 L 278.400 17.200 278.400 15.843 C 278.400 14.184,277.999 14.000,274.372 14.000 C 271.667 14.000,271.578 13.967,270.105 12.401 C 268.614 10.816,268.572 10.801,265.658 10.801 C 262.996 10.800,262.640 10.705,261.929 9.800 C 261.496 9.250,260.885 8.800,260.571 8.800 C 260.257 8.800,260.000 8.620,260.000 8.400 C 260.000 8.157,258.213 8.000,255.440 8.000 L 250.879 8.000 250.525 6.500 L 250.171 5.000 243.695 4.890 C 237.042 4.777,235.200 4.258,235.200 2.497 C 235.200 1.651,233.175 1.600,199.834 1.600 L 165.733 1.600 164.000 3.200 M150.751 78.027 C 152.450 78.391,152.803 78.633,153.170 79.686 C 153.799 81.489,153.775 257.179,153.146 258.559 C 152.419 260.155,152.191 260.177,134.923 260.316 L 118.445 260.448 117.739 259.124 C 117.223 258.157,116.974 256.495,116.816 252.961 C 116.549 246.982,116.112 246.139,114.237 247.982 C 112.965 249.233,111.066 250.669,109.056 251.900 C 108.427 252.285,107.347 252.998,106.656 253.485 C 105.965 253.971,104.320 254.886,103.000 255.517 C 101.680 256.148,100.354 256.964,100.053 257.330 C 99.753 257.695,98.763 258.192,97.853 258.433 C 96.944 258.675,95.030 259.381,93.600 260.003 C 91.174 261.058,87.780 261.684,79.600 262.583 C 75.798 263.001,61.060 261.374,59.800 260.396 C 59.580 260.226,57.874 259.607,56.008 259.021 C 54.143 258.435,52.025 257.504,51.302 256.952 C 50.578 256.400,49.180 255.592,48.193 255.156 C 47.207 254.720,46.400 254.216,46.400 254.038 C 46.400 253.859,45.397 253.047,44.172 252.234 C 41.202 250.262,35.956 245.209,34.228 242.657 C 33.462 241.525,32.423 240.219,31.918 239.754 C 31.413 239.289,30.749 238.209,30.443 237.354 C 30.137 236.499,29.462 235.291,28.943 234.669 C 28.424 234.047,28.000 233.207,28.000 232.803 C 28.000 232.398,27.397 230.926,26.661 229.533 C 25.924 228.140,25.086 225.740,24.799 224.200 C 24.513 222.660,23.859 220.164,23.347 218.653 C 21.431 213.000,20.975 195.350,22.606 190.000 C 22.975 188.790,23.780 185.887,24.393 183.548 C 25.007 181.210,25.960 178.510,26.510 177.548 C 27.061 176.587,27.720 175.139,27.976 174.332 C 28.232 173.525,28.699 172.650,29.014 172.388 C 29.330 172.126,29.991 171.077,30.483 170.056 C 30.976 169.035,31.975 167.480,32.704 166.600 C 35.145 163.653,37.395 161.091,37.936 160.644 C 38.231 160.400,39.240 159.480,40.178 158.600 C 44.402 154.638,50.526 150.397,55.464 148.014 C 56.819 147.360,58.568 146.390,59.350 145.860 C 60.132 145.329,61.629 144.767,62.676 144.609 C 63.724 144.452,65.280 143.968,66.133 143.532 C 71.073 141.012,86.730 140.945,94.266 143.412 C 95.990 143.976,98.180 144.546,99.133 144.678 C 100.186 144.824,101.755 145.522,103.133 146.458 C 104.380 147.305,105.532 147.999,105.692 147.999 C 106.027 148.000,110.929 151.349,113.600 153.401 L 115.400 154.785 116.100 153.948 C 116.755 153.165,116.800 150.826,116.802 117.456 C 116.804 82.315,116.894 79.568,118.091 78.100 C 118.622 77.448,147.746 77.382,150.751 78.027 M328.904 79.780 C 333.420 80.340,335.200 80.848,335.200 81.576 C 335.200 81.767,335.975 82.378,336.923 82.934 C 338.514 83.866,339.582 84.940,343.113 89.158 C 345.012 91.426,346.621 98.872,345.997 102.500 C 344.806 109.417,344.712 109.706,342.692 112.682 C 340.467 115.963,336.141 119.822,334.234 120.229 C 333.555 120.373,331.920 120.950,330.600 121.510 C 327.153 122.972,321.657 122.974,318.200 121.515 C 316.880 120.958,315.110 120.280,314.266 120.009 C 311.779 119.209,306.896 114.450,305.433 111.400 C 302.853 106.018,302.052 99.388,303.501 95.390 C 303.978 94.076,304.555 92.280,304.784 91.400 C 305.424 88.947,310.960 83.197,315.163 80.620 C 315.473 80.430,317.543 80.055,319.763 79.787 C 321.983 79.519,323.897 79.277,324.015 79.250 C 324.134 79.222,326.333 79.461,328.904 79.780 M240.258 141.202 C 247.333 142.092,248.008 142.240,250.400 143.433 C 251.390 143.927,253.261 144.525,254.559 144.763 C 255.931 145.014,257.475 145.620,258.252 146.213 C 258.987 146.773,260.350 147.500,261.282 147.829 C 262.214 148.158,263.342 148.761,263.789 149.168 C 264.235 149.576,265.355 150.289,266.279 150.752 C 267.202 151.215,268.102 151.837,268.279 152.135 C 268.455 152.432,269.410 153.249,270.400 153.952 C 272.717 155.595,277.521 160.339,279.028 162.472 C 279.673 163.384,280.740 164.664,281.400 165.316 C 282.739 166.640,284.166 168.939,286.018 172.756 C 286.700 174.162,287.603 175.782,288.023 176.356 C 288.444 176.930,289.160 178.906,289.616 180.748 C 290.071 182.589,290.693 184.479,290.997 184.948 C 293.466 188.754,293.417 215.157,290.932 219.839 C 290.593 220.478,289.974 222.408,289.557 224.129 C 289.140 225.850,288.292 228.010,287.673 228.929 C 287.054 229.848,286.230 231.454,285.841 232.498 C 285.453 233.542,284.903 234.532,284.618 234.698 C 284.334 234.864,283.632 235.932,283.058 237.072 C 282.484 238.212,281.678 239.382,281.267 239.672 C 280.856 239.962,280.222 240.776,279.860 241.480 C 279.497 242.184,278.964 242.904,278.675 243.080 C 278.386 243.256,277.095 244.570,275.805 246.000 C 274.516 247.430,272.905 248.960,272.225 249.400 C 271.544 249.840,270.540 250.616,269.994 251.126 C 268.223 252.774,265.143 254.853,263.298 255.644 C 262.307 256.068,260.984 256.847,260.358 257.374 C 259.732 257.901,258.630 258.460,257.910 258.615 C 257.189 258.771,255.714 259.345,254.631 259.891 C 253.548 260.437,250.949 261.228,248.854 261.649 C 246.760 262.071,243.866 262.782,242.423 263.230 C 236.233 265.152,218.117 265.156,211.977 263.236 C 210.534 262.785,207.591 262.061,205.437 261.627 C 203.283 261.194,201.133 260.588,200.660 260.281 C 200.187 259.975,198.599 259.325,197.130 258.839 C 195.662 258.353,194.223 257.669,193.933 257.320 C 193.643 256.970,192.325 256.170,191.003 255.541 C 189.681 254.912,187.610 253.590,186.400 252.604 C 185.190 251.618,183.570 250.378,182.800 249.849 C 180.928 248.564,175.351 242.706,175.027 241.684 C 174.885 241.237,174.328 240.583,173.790 240.230 C 173.251 239.877,172.444 238.871,171.997 237.994 C 171.550 237.117,171.031 236.400,170.844 236.400 C 170.657 236.400,170.025 235.293,169.438 233.941 C 168.851 232.588,167.950 230.981,167.436 230.369 C 166.921 229.758,166.372 228.569,166.216 227.729 C 166.061 226.888,165.425 225.030,164.804 223.600 C 162.617 218.564,160.392 203.096,161.082 197.728 C 161.820 191.991,163.653 183.019,164.418 181.400 C 164.834 180.520,165.545 178.723,165.998 177.406 C 166.451 176.089,167.243 174.379,167.759 173.606 C 168.274 172.833,169.124 171.455,169.648 170.545 C 172.404 165.755,173.391 164.293,174.252 163.729 C 174.774 163.387,175.200 162.866,175.200 162.569 C 175.200 162.019,182.711 154.400,183.253 154.400 C 183.417 154.400,184.414 153.653,185.468 152.741 C 186.523 151.828,187.932 150.853,188.601 150.574 C 189.269 150.295,190.149 149.698,190.556 149.248 C 190.964 148.798,191.950 148.223,192.748 147.971 C 193.547 147.718,195.280 146.923,196.600 146.205 C 197.920 145.487,199.883 144.772,200.962 144.616 C 202.041 144.460,203.841 143.924,204.962 143.424 C 208.341 141.919,207.300 142.100,222.400 140.399 C 226.284 139.962,232.676 140.249,240.258 141.202 M343.558 145.362 L 344.400 146.124 344.400 201.482 C 344.400 262.403,344.558 258.648,341.952 259.557 C 340.592 260.031,308.593 260.202,306.884 259.744 C 304.704 259.160,304.800 261.824,304.800 201.696 C 304.800 141.597,304.668 145.018,307.000 144.672 C 311.303 144.033,342.747 144.627,343.558 145.362 M85.000 174.170 C 84.120 174.463,82.410 175.009,81.200 175.385 C 79.990 175.760,78.550 176.467,78.000 176.956 C 77.450 177.445,76.280 178.315,75.400 178.889 C 73.049 180.421,68.507 185.034,67.609 186.800 C 67.329 187.350,66.755 188.180,66.333 188.644 C 64.414 190.756,62.260 202.817,63.143 206.503 C 64.527 212.276,65.398 215.097,66.011 215.800 C 66.395 216.240,67.073 217.320,67.516 218.200 C 67.959 219.080,68.807 220.250,69.399 220.800 C 69.991 221.350,70.733 222.293,71.046 222.896 C 71.360 223.499,72.288 224.339,73.108 224.763 C 73.929 225.187,74.816 225.891,75.080 226.329 C 75.344 226.767,76.244 227.342,77.080 227.607 C 77.916 227.872,79.410 228.562,80.400 229.139 C 82.890 230.593,91.957 230.720,94.600 229.338 C 95.480 228.878,97.206 228.212,98.435 227.858 C 99.665 227.505,101.355 226.672,102.190 226.008 C 103.026 225.343,103.920 224.800,104.177 224.800 C 104.948 224.800,109.825 219.529,110.762 217.683 C 111.241 216.739,112.019 215.581,112.491 215.109 C 113.271 214.329,113.696 213.157,115.428 207.000 C 117.536 199.505,113.317 185.340,107.893 181.700 C 107.155 181.206,106.183 180.457,105.732 180.037 C 105.281 179.617,104.212 178.896,103.356 178.435 C 102.500 177.974,101.337 177.226,100.770 176.773 C 98.209 174.724,88.269 173.083,85.000 174.170 M220.696 176.153 C 219.869 176.459,218.969 176.894,218.695 177.121 C 218.422 177.348,217.220 177.919,216.025 178.390 C 214.061 179.164,212.030 180.538,210.400 182.197 C 210.070 182.532,209.035 183.584,208.100 184.535 C 207.165 185.485,206.400 186.447,206.400 186.671 C 206.400 186.896,205.884 187.792,205.254 188.662 C 201.326 194.084,200.792 209.426,204.359 214.400 C 204.753 214.950,205.400 216.030,205.795 216.800 C 206.650 218.464,212.718 224.800,213.457 224.800 C 213.740 224.800,214.594 225.346,215.354 226.013 C 219.213 229.402,234.284 229.529,238.840 226.211 C 239.588 225.666,240.650 225.027,241.200 224.791 C 242.900 224.062,248.695 217.595,249.436 215.601 C 249.803 214.611,250.431 213.254,250.831 212.587 C 253.081 208.832,253.083 194.817,250.835 191.924 C 250.440 191.416,249.899 190.332,249.632 189.516 C 248.581 186.292,241.848 179.532,238.762 178.604 C 238.233 178.445,236.905 177.749,235.810 177.057 C 233.455 175.569,223.838 174.994,220.696 176.153 \",\n  stroke: \"none\",\n  fill: \"#fbb424\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgDoi = function SvgDoi(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 400,\n    viewBox: \"0, 0, 400,400\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgDoi, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/doi.2c8036be.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"image\", {\n  id: \"E\",\n  width: 64,\n  height: 64,\n  xlinkHref: \"data:img/png;base64,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\"\n});\n\nvar SvgBibtex = function SvgBibtex(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: 64,\n    height: 64,\n    viewBox: \"0 0 64 64\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgBibtex, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/bibtex.29c1d433.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\n\nimport clsx from 'clsx';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst mkErrMsgStyles = makeStyles(theme => ({\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n  },\n}));\n\nexport default function ErrorMessage(props) {\n  const classes = mkErrMsgStyles();\n  const msg = props.msg;\n  const extra = props.extra;\n  return <SnackbarContent\n    className={clsx(classes.error)}\n    style={{ paddingTop: '0px', paddingBottom: '0px', marginBottom: '5px' }}\n    message={\n      <span className={classes.message}>\n        <ErrorIcon className={clsx(classes.icon, classes.iconVariant)} />\n        {msg}\n        {!extra ? '' : <br />}\n        {!extra ? '' : extra}\n      </span>\n    }\n  />;\n}","\nimport React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport { ReactComponent as DoiIcon } from './doi.svg';\nimport { ReactComponent as BibIcon } from './bibtex.svg';\n\nimport ErrorMessage from './cmpErrorMessage'\n\n//-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nfunction Doi(props) {\n  const [doi] = React.useState(props.value);\n  return (\n    <Tooltip title={doi}>\n      <IconButton size='small' disableFocusRipple={true} onClick={() => { window.open('https://www.doi.org' + (doi.startsWith('/') ? '' : '/') + doi); }}>\n        <DoiIcon style={{ width: '24px', height: '24px' }} />\n      </IconButton>\n    </Tooltip>)\n}\n\n//-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nclass BibRecord extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      addr: props.addr,\n      record: undefined\n    };\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + this.state.addr)\n      .then(response => {\n        if (!response.ok)\n          throw Error('./' + response.statusText);\n        return response;\n      })\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          isLoading: false,\n          record: text\n        })\n      })\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <table>\n        <tbody>\n          <tr>\n            <td align='center' valign='middle' width='200px' height='100px'>\n              <CircularProgress />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    }\n    return (\n      <DialogContent>\n        <pre style={{\n          overflowX: 'auto',\n          whiteSpace: 'pre-wrap ',\n          wordWrap: 'break-word'\n        }}>{this.state.record}</pre>\n      </DialogContent>)\n  }\n}\n\nfunction BibTex(props) {\n  const [addr] = React.useState(props.value);\n  const [opened, setOpen] = React.useState(false)\n  return (\n    <div style={{ display: 'inline' }}>\n      <Tooltip title='Show Bibliography Record'>\n        <IconButton size='small' disableFocusRipple={true} onClick={() => { setOpen(true) }}>\n          <BibIcon style={{ width: '24px', height: '24px' }} />\n        </IconButton>\n      </Tooltip>\n      <Dialog open={opened} fullWidth={true} maxWidth='md' onClose={() => { setOpen(false) }}>\n        <BibRecord addr={addr} />\n      </Dialog>\n    </div>)\n}\n\n//-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nexport default class Publications extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      papers: undefined,\n      failedMsg: undefined\n    };\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/bibliographies/papers.json')\n      .then(response => {\n        if (!response.ok)\n          throw Error('./' + response.statusText);\n        return response;\n      })\n      .then((r) => r.json())\n      .then(js => {\n        this.setState({\n          isLoading: false,\n          papers: js.papers\n        })\n      })\n      .catch(e => this.setState({\n        isLoading: false,\n        failedMsg: e\n      }))\n  }\n\n  transform = (paper, index) => {\n    var name = paper.name\n    var authors = paper.authors\n    var address = paper.address\n    var doi = paper.doi\n    var bib = paper.bibtex\n    if (name) {\n      name = name.trim()\n      name = name.endsWith(\".\") ? name : name + \".\"\n    }\n    if (authors) {\n      authors = authors.trim()\n      authors = authors.endsWith(\".\") ? authors : authors + \".\"\n    }\n    if (address) {\n      address = address.trim()\n      address = address.endsWith(\".\") ? address : address + \".\"\n    }\n    return <tr key={index}>\n      <td valign='top'>{index + 1}.</td>\n      <td style={{ paddingBottom: '1em' }}>\n        {authors}{' '}\n        <b>{name}</b>{' '}\n        {address}{' '}\n        {!doi ? '' : <Doi value={doi} />}\n        {!bib ? '' : <BibTex value={bib} />}\n        {name ? '' : <ErrorMessage msg='Paper name is not given' />}\n        {authors ? '' : <ErrorMessage msg='Authors are not given' />}\n        {address ? '' : <ErrorMessage msg='Address is not given' />}\n      </td>\n    </tr>;\n  };\n\n  render = () => {\n    return (\n      <Typography component=\"div\" papers={this.state.papers} style={{ padding: 8 * 3 }}>\n        {\n          this.state.failedMsg ? <ErrorMessage msg={'Error in loading publication records.'} extra={this.state.failedMsg.toString()} /> :\n            this.state.isLoading ?\n              <table style={{ margin: 'auto' }}>\n                <tbody>\n                  <tr>\n                    <td><CircularProgress /></td>\n                  </tr>\n                </tbody>\n              </table> :\n              <table>\n                <tbody>\n                  {this.state.papers.map(this.transform)}\n                </tbody>\n              </table>\n        }\n      </Typography>)\n  };\n}","\nimport React, { Component } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport ErrorMessage from './cmpErrorMessage'\n\n\n\nfunction draw(that) {\n  const canvas = that.canvas ? that.canvas.current : undefined;\n\n  const fontName = 'Bookman';\n  const nFontName = 'Verdana';\n  const fontSize = 3.8;\n  const nFontSize = 3.2;\n  const scaleBars = that.scaleBars || 1;\n\n  if (canvas) {\n    // Double the resolution, to get a better quality\n    canvas.style.width = that.width + 'px';\n    canvas.style.height = that.height + 'px';\n    canvas.width = Math.ceil(that.width * 2);\n    canvas.height = Math.ceil(that.height * 2);\n    var ctx = canvas.getContext('2d');\n    const scaleX = that.scaleX || 1;\n    ctx.scale(2 / scaleX, 2);\n\n    // Setup font and the coordinate system (lower-left=0,0, upper-right=100,100)\n    ctx.save();\n    ctx.rect(that.x0, that.y0, that.width, that.height);\n    ctx.clip();\n    ctx.transform((that.width - that.x0) / 100, 0, 0, -(that.height - that.y0) / 100, that.x0, that.height);\n    ctx.lineWidth = 100.0 / that.width;\n    ctx.font = fontSize + 'px ' + fontName;\n  }\n\n  const rectX0 = 5;\n  const rectY0 = 22;\n  // const rectX1 = 99.5;\n  const rectY1 = 99.5;\n\n  const barWidth = 3.6;\n  const barSep = 1.3;\n  var x = rectX0 + barWidth;\n  var maxStrataHeight = 0;\n\n  const addHorizontalText = (text, x, y) => {\n    if (canvas) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.scale(1, -1)\n      ctx.fillText(text, 0, 0);\n      ctx.restore();\n    }\n  }\n\n  const addVerticalText = (text, x, y) => {\n    if (canvas) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.scale(-1, 1)\n      ctx.rotate(Math.PI / 2);\n      ctx.fillText(text, 0, 0);\n      ctx.restore();\n    }\n  }\n\n  const time2str = (seconds) => {\n    return seconds.toFixed(1) + 's';\n  }\n\n  const sampleCount2str = (count) => {\n    if (count <= 999) return count.toFixed(0);\n    return (count / 1000.0).toFixed(1) + 'k';\n  }\n\n  const value2str = (val) => {\n    return that.kind === 'times' ? time2str(val) : sampleCount2str(val);\n  }\n\n  var highestBar = 0;\n  const addBar = (name, value, err) => {\n    const height = typeof (value) === 'number' ? value * scaleBars : value;\n    const err2 = 1.96 * err * scaleBars;\n    if (canvas) {\n      ctx.save();\n      if (typeof (value) === 'number') {\n        ctx.lineWidth = ctx.lineWidth * 1.2;\n        ctx.fillRect(x - barWidth / 2, rectY0, barWidth, height);\n        ctx.strokeRect(x - barWidth / 2, rectY0, barWidth, height);\n        if (err) {\n          ctx.beginPath();\n          ctx.moveTo(x - barWidth / 4, rectY0 + height + err2);\n          ctx.lineTo(x + barWidth / 4, rectY0 + height + err2);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(x - barWidth / 4, rectY0 + height - err2);\n          ctx.lineTo(x + barWidth / 4, rectY0 + height - err2);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(x, rectY0 + height + err2);\n          ctx.lineTo(x, rectY0 + height - err2);\n          ctx.stroke();\n        }\n      } else {\n        ctx.save();\n        ctx.translate(x, rectY0);\n        ctx.scale(-1, 1);\n        ctx.rotate(Math.PI / 2);\n        ctx.font = 'bold ' + (fontSize * 0.9) + 'px ' + fontName;\n        ctx.fillStyle = 'rgb(153,67,62)';\n        ctx.textAlign = 'start';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(value, 0.5, 0);\n        ctx.restore();\n      }\n      if (typeof (value) === 'number') {\n        ctx.save();\n        ctx.translate(x, rectY0 + height + (err2 ? err2 : 0));\n        ctx.scale(-1, 1);\n        ctx.rotate(Math.PI / 2);\n        ctx.font = (nFontSize * 0.95) + 'px ' + nFontName;\n        ctx.fillStyle = '#000000';\n        ctx.textAlign = 'start';\n        ctx.textBaseline = 'middle';\n        const valStr = value2str(value);\n        ctx.fillText(valStr, 0.5, 0);\n        highestBar = Math.max(ctx.measureText(valStr).width + height + (err2 ? err2 : 0), highestBar);\n        ctx.restore();\n      }\n      ctx.translate(x, rectY0);\n      ctx.scale(-1, 1);\n      ctx.rotate(Math.PI / 2);\n      ctx.fillStyle = '#000000';\n      ctx.textAlign = 'end';\n      ctx.textBaseline = 'middle';\n      if (name.includes('^')) {\n        const parts = name.split('^', 2);\n        const base = parts[0];\n        const power = parts[1];\n        ctx.font = (nFontSize * 0.85) + 'px ' + nFontName;\n        ctx.fillText(power, -0.5, -0.4);\n        var w = ctx.measureText(power).width + 0.5;\n        ctx.font = nFontSize + 'px ' + nFontName;\n        ctx.fillText(base, -0.6 - w, 0.6);\n        w += ctx.measureText(base).width + 0.6;\n        maxStrataHeight = Math.max(maxStrataHeight, w)\n      } else\n        ctx.fillText(name, -0.5, 0);\n      ctx.restore();\n    }\n    x += barWidth + 0.75;\n  }\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(165,198,194)';\n    ctx.strokeStyle = 'rgb(105,159,152)';\n  }\n  if (that.data.MTBDD) addBar('MTBDD', that.data.MTBDD);\n  if (that.data.Sparse) addBar('Sparse', that.data.Sparse);\n  if (that.data.Hybrid) addBar('Hybrid', that.data.Hybrid);\n  if (that.data.Explicit) addBar('Explicit', that.data.Explicit);\n\n  if (that.data.MTBDD || that.data.Sparse || that.data.Hybrid || that.data.Explicit)\n    x += barSep;\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(148,149,196)';\n    ctx.strokeStyle = 'rgb(96,98,166)';\n  }\n  if (that.data.SPRT) addBar('SPRT', that.data.SPRT[0], that.data.SPRT[1]);\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(158,164,169)';\n    ctx.strokeStyle = 'rgb(120,129,136)';\n  }\n  if (that.data.GLRT) addBar('GLRT', that.data.GLRT[0], that.data.GLRT[1]);\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(186,162,148)';\n    ctx.strokeStyle = 'rgb(163,132,114)';\n  }\n  if (that.data.Antithetic) addBar('Antithetic', that.data.Antithetic[0], that.data.Antithetic[1]);\n\n  if (that.data.SPRT || that.data.GLRT || that.data.Antithetic)\n    x += barSep;\n\n  const addStrataBarIfDefined = (key) => {\n    if (!that.data[key]) return false;\n    addBar(key.substring(2), that.data[key][0], that.data[key][1]);\n    return true;\n  }\n\n  var hasStrata2 = false\n  var hasStrata16 = false\n  var hasStrata256 = false\n  var hasStrata4096 = false\n\n  const straXbegin = x;\n  if (canvas) {\n    ctx.fillStyle = 'rgb(192,139,191)';\n    ctx.strokeStyle = 'rgb(168,101,167)';\n  }\n  const straX2begin = x;\n  hasStrata2 |= addStrataBarIfDefined('S-2^1');\n  const straX2end = x;\n\n  if (hasStrata2)\n    x += barSep / 2;\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(173,197,161)';\n    ctx.strokeStyle = 'rgb(132,168,115)';\n  }\n  const straX16begin = x;\n  hasStrata16 |= addStrataBarIfDefined('S-2^4');\n  hasStrata16 |= addStrataBarIfDefined('S-4^2');\n  hasStrata16 |= addStrataBarIfDefined('S-16^1');\n  const straX16end = x;\n\n  if (hasStrata16)\n    x += barSep / 2;\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(163,186,222)';\n    ctx.strokeStyle = 'rgb(106,143,202)';\n  }\n  const straX256begin = x;\n  hasStrata256 |= addStrataBarIfDefined('S-2^8');\n  hasStrata256 |= addStrataBarIfDefined('S-4^4');\n  hasStrata256 |= addStrataBarIfDefined('S-16^2');\n  hasStrata256 |= addStrataBarIfDefined('S-256^1');\n  const straX256end = x;\n\n  if (hasStrata256)\n    x += barSep / 2;\n\n  if (canvas) {\n    ctx.fillStyle = 'rgb(211,148,148)';\n    ctx.strokeStyle = 'rgb(189,97,99)';\n  }\n  const straX4096begin = x;\n  hasStrata4096 = addStrataBarIfDefined('S-2^12');\n  hasStrata4096 = addStrataBarIfDefined('S-4^6');\n  hasStrata4096 = addStrataBarIfDefined('S-16^3');\n  hasStrata4096 = addStrataBarIfDefined('S-64^2');\n  hasStrata4096 = addStrataBarIfDefined('S-4096^1');\n  const straX4096end = x;\n\n  if (hasStrata4096)\n    x += barSep / 2;\n\n  const straXend = x;\n\n  if (canvas) {\n    ctx.fillStyle = '#000000'\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = nFontSize + 'px ' + nFontName;\n  }\n  if (hasStrata2) addHorizontalText('2', (straX2begin + straX2end - barWidth - 1) / 2, rectY0 - maxStrataHeight - 1.2 * nFontSize / 2);\n  if (hasStrata16) addHorizontalText('16', (straX16begin + straX16end - barWidth - 1) / 2, rectY0 - maxStrataHeight - 1.2 * nFontSize / 2);\n  if (hasStrata256) addHorizontalText('256', (straX256begin + straX256end - barWidth - 1) / 2, rectY0 - maxStrataHeight - 1.2 * nFontSize / 2);\n  if (hasStrata4096) addHorizontalText('4096', (straX4096begin + straX4096end - barWidth - 1) / 2, rectY0 - maxStrataHeight - 1.2 * nFontSize / 2);\n\n  if (canvas) {\n    ctx.font = fontSize + 'px ' + fontName;\n  }\n  if (hasStrata2 || hasStrata16 || hasStrata256 || hasStrata4096)\n    addHorizontalText('Stratified', (straXbegin + straXend - barWidth - 1) / 2, rectY0 - maxStrataHeight - 1.2 * nFontSize - 1.2 * fontSize / 2);\n\n  if (canvas) {\n    ctx.globalCompositeOperation = 'destination-over';\n    ctx.strokeStyle = 'rgb(221,221,221)';\n    ctx.strokeRect(straXbegin - barWidth + barSep / 2, rectY0, straXend - straXbegin, -maxStrataHeight);\n    // ctx.strokeRect(straXbegin - barWidth + barSep / 2, rectY0, straXend - straXbegin, -maxStrataHeight - nFontSize);\n    ctx.strokeRect(straXbegin - barWidth + barSep / 2, rectY0, straXend - straXbegin, -maxStrataHeight - 1.2 * nFontSize - 1.2 * fontSize);\n    if (hasStrata2) ctx.strokeRect(straX2begin - barWidth + barSep / 2, rectY0, straX2end - straXbegin + barSep / 2, -maxStrataHeight - 1.2 * nFontSize);\n    if (hasStrata16) ctx.strokeRect(straX16begin - barWidth + barSep / 2, rectY0, straX16end - straX16begin + barSep / 2, -maxStrataHeight - 1.2 * nFontSize);\n    if (hasStrata256) ctx.strokeRect(straX256begin - barWidth + barSep / 2, rectY0, straX256end - straX256begin + barSep / 2, -maxStrataHeight - 1.2 * nFontSize);\n    if (hasStrata4096) ctx.strokeRect(straX4096begin - barWidth + barSep / 2, rectY0, straX4096end - straX4096begin + barSep / 2, -maxStrataHeight - 1.2 * nFontSize);\n    ctx.globalCompositeOperation = 'source-over';\n  }\n\n  if (canvas) {\n    // Draw the big rectangle\n    ctx.strokeStyle = '#000000'\n    ctx.fillStyle = '#F3F3F3'\n    ctx.globalCompositeOperation = 'destination-over';\n    ctx.fillRect(rectX0, rectY0, straXend - rectX0 - barSep, rectY1 - rectY0);\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.strokeRect(rectX0, rectY0, straXend - rectX0 - barSep, rectY1 - rectY0);\n\n    ctx.textBaseline = 'bottom';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = '#000000'\n    addVerticalText(that.kind === 'times' ? 'Average Time' : 'Average Number of Samples', rectX0, (rectY0 + rectY1) / 2);\n\n    ctx.restore();\n  }\n\n  // straXbegin - barWidth + barSep / 2\n  //  straXend - straXbegin, -maxStrataHeight);\n\n  // return canvas ? highestBar / (rectY1 - rectY0) : straXend - rectX0 - barSep + 5.5;\n  return canvas ? highestBar / (rectY1 - rectY0) : straXend - barWidth + barSep / 2 + 2;\n}\n\n//-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n    this.kind = props.kind;\n    this.data = props.data;\n    this.x0 = props.offsetX;\n    this.y0 = props.offsetY;\n    this.width = props.width\n    this.height = props.height;\n    this.scaleX = props.scaleX;\n    this.scaleBars = this.data.initScaleBar || 0.1;\n    this.minScaleBars = 0.001;\n    this.animationFrames = 0;\n  }\n\n  componentDidMount() {\n    if (!this.canvas.current)\n      return;\n    const that = this;\n    function closure() {\n      const maxFrames = 100;\n      const h = draw(that);\n      var needMore = false;\n      if (h < 0.95) {\n        needMore = true;\n        that.animationFrames += 1;\n        that.scaleBars *= 1 + (1 - Math.pow(h, 0.3)) / 3;\n      }\n      else if (h > 1) {\n        if (that.minScaleBars > 0) {\n          console.warn('scaleBars (' + that.scaleBars + ') is too large. It was originally ' + that.initScaleBars + '. It will be reset to ' + that.minScaleBars);\n          needMore = true;\n          that.animationFrames += 1;\n          that.scaleBars = that.minScaleBars;\n          that.minScaleBars = 0;\n        }\n        else console.error('Could not find the right value for scaleBars. Current value is ' + that.scaleBars + ', initial value was ' + that.initScaleBars);\n      }\n      if (needMore)\n        if (that.animationFrames < maxFrames)\n          window.requestAnimationFrame(closure);\n        else\n          console.warn('Needed to draw more, but maximum number of frames (' + maxFrames + ') are already drawn');\n    }\n    closure();\n  }\n\n  render = () => {\n    return <canvas ref={this.canvas} />\n  }\n}\n\n//-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nexport default class Benchmarks extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      address: props.address,\n      failedMsg: undefined,\n      data: undefined\n    };\n  }\n\n  componentDidMount() {\n    fetch(this.state.address)\n      .then(response => {\n        if (!response.ok)\n          throw Error('./' + response.statusText);\n        return response;\n      })\n      .then((r) => r.json())\n      .then(js => {\n        this.setState({\n          isLoading: false,\n          data: js\n        })\n      })\n      .catch(e => this.setState({\n        isLoading: false,\n        failedMsg: e\n      }))\n  }\n\n  render = () => {\n    if (this.state.failedMsg)\n      return (\n        <Typography component='div' papers={this.state.papers} style={{ padding: 8 * 3 }}>\n          <ErrorMessage msg={'Error in loading file.' + this.state.address} extra={this.state.failedMsg.toString()} />\n        </Typography>);\n    if (this.state.isLoading)\n      return (\n        <Typography component='div' papers={this.state.papers} style={{ padding: 8 * 3, width: '100%' }}>\n          <Grid container justify='center' alignItems='center'>\n            <Grid item><CircularProgress /></Grid>\n          </Grid>\n        </Typography>);\n    const rows = this.state.data.results.map((result, index) => {\n      // Make <span/>s for parameters (we don't make string, because we want to add non-breaking space as thousand separator)\n      var params = [<span key='p-1'>Parameters:</span>];\n      var size = [<span key='s-1'>Size:</span>];\n      var first = true;\n      for (var k in result.params) {\n        params.push((first ? ' ' : ', ') + k + '=' + result.params[k]);\n        first = false;\n      }\n      first = true;\n      for (k in result.size) {\n        const parts = result.size[k].replace(/\\B(?=(\\d{3})+(?!\\d))/g, '&nbsp;').split('&nbsp;');\n        const spaced = parts.map((n, i) => {\n          if (i === 0) return n\n          return <span key={'sp-' + i}>&#8239;{n}</span>\n        });\n        size.push(<span key={'s-' + k}>{first ? ' ' : ', '}{k}={spaced}</span>)\n        first = false;\n      }\n      // If only one of 'params' or 'size' contains element or if none of them do then no need to say this is params, that is size\n      if (params.length === 1 || size.length === 1) {\n        params.shift();\n        size.shift();\n      }\n\n      const s1 = draw({ kind: 'times', data: result.times }) / 100.0;\n      const s2 = draw({ kind: 'samples', data: result.samples }) / 100.0;\n      const w1 = s1 * 390.0;\n      const w2 = s2 * 390.0;\n      var description = result.description ? result.description.trim() : undefined;\n      var note = result.note ? result.note.trim() : undefined;\n\n      var appBar = undefined\n      if (params.length > 0 || size.length > 0 || note) {\n        var info = undefined;\n        if (params && size) info = <Typography align='center' variant='caption'>{params}&emsp;&emsp;&emsp;{size}</Typography>;\n        else if (params) info = <Typography align='center' variant='caption'>{params}</Typography>;\n        else if (size) info = <Typography align='center' variant='caption'>{size}</Typography>;\n        appBar = (\n          <AppBar position='static' style={{ backgroundColor: 'rgb(32,39,42)' }}>\n            {!info ? '' : info}\n            {!note ? '' : <Typography align='justify' variant='caption' dangerouslySetInnerHTML={{ __html: note }} />}\n          </AppBar>);\n      }\n      return (\n        <Card key={index} style={{ marginTop: index = 0 ? '0px' : '10px', marginBottom: index = this.state.data.results.length ? '0px' : '10px' }}>\n          <Grid container justify='space-evenly' >\n            {!description ? '' :\n              <Grid item key='desc' style={{ flexBasis: '100%' }}>\n                <Typography align='justify' variant='body2' color='textPrimary' dangerouslySetInnerHTML={{ __html: description }} />\n              </Grid>}\n            <Grid item >\n              <div style={{ marginLeft: '10pt', marginRight: '10pt', marginTop: '10pt' }}>\n                <Graph offsetX={0} offsetY={0} width={w1} height={300} kind='times' data={result.times} scaleX={s1} style={{ lineHeight: 'normal' }} />\n              </div>\n            </Grid>\n            <Grid item>\n              <div style={{ marginLeft: '10pt', marginRight: '10pt', marginTop: '10pt' }}>\n                <Graph offsetX={0} offsetY={0} width={w2} height={300} kind='samples' data={result.samples} scaleX={s2} style={{ lineHeight: 'normal' }} />\n              </div>\n            </Grid>\n          </Grid>\n          {!appBar ? '' : appBar}\n        </Card>\n      );\n    });\n    var description = this.state.data.description ? this.state.data.description.trim() : undefined;\n    const cells = rows.map((row, index) => {\n      return <Grid item key={index} zeroMinWidth={true}>{row}</Grid>;\n    });\n    if (description)\n      cells.unshift(\n        <Grid item xs={12} key='desc' zeroMinWidth={true}>\n          <Typography align='justify' variant='body2' color='textPrimary' dangerouslySetInnerHTML={{ __html: description }} />\n        </Grid>);\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-evenly\"\n        alignItems=\"flex-end\"\n      >\n        {cells}\n      </Grid>\n    );\n\n\n  };\n}","\nimport React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Link from '@material-ui/core/Link';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport ErrorMessage from './cmpErrorMessage'\nimport DtmcLTL from './cmpDtmcLtl'\n\nexport default class Benchmarks extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      results: undefined,\n      failedMsg: undefined\n    };\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/benchmarks/results.json')\n      .then(response => {\n        if (!response.ok)\n          throw Error('./' + response.statusText);\n        return response;\n      })\n      .then((r) => r.json())\n      .then(js => {\n        this.setState({\n          isLoading: false,\n          results: js.files\n        })\n      })\n      .catch(e => this.setState({\n        isLoading: false,\n        failedMsg: e\n      }))\n  }\n\n  transform = (result, index) => {\n    const file = result.file;\n    return (\n      <ExpansionPanel key={index} defaultExpanded={!index} TransitionProps={{ unmountOnExit: true }}>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n          style={{ backgroundColor: '#EEEEEE' }}>\n          <Typography>\n            <b>{file.type}: {file.name}</b>\n            {!file.link ? '' : <br />}\n            {!file.link ? '' : <Link target='_blank' rel='noreferrer' href={file.link} >{file.link_name ? file.link_name : file.link}</Link>}\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <DtmcLTL address={process.env.PUBLIC_URL + file.address} />\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    )\n  }\n\n  render = () => {\n    return (\n      <Typography component=\"div\" papers={this.state.papers} style={{ padding: 8 * 3 }}>\n        {\n          this.state.failedMsg ? <ErrorMessage msg={'Error in loading benchmark results file.'} extra={this.state.failedMsg.toString()} /> :\n            this.state.isLoading ?\n              <table style={{ margin: 'auto' }}>\n                <tbody>\n                  <tr>\n                    <td><CircularProgress /></td>\n                  </tr>\n                </tbody>\n              </table> :\n              <div width='100%'>\n                {this.state.results.map(this.transform)}\n              </div>\n        }\n      </Typography>)\n  };\n}\n","\nimport React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nexport default class Download extends Component {\n\n  render = () =>\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      STMC is released under the <Link href='https://www.gnu.org/licenses/gpl-3.0.en.html' target='_blank' rel='noreferrer'>GNU General Public License v3.0</Link> and \n      is hosted on <Link href='https://github.com/nima-roohi/STMC' target='_blank' rel='noreferrer'>GitHub</Link>, where installation instructions, as well as how to \n      run benchmarks and other examples, can be found.\n    </Typography>\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"image\", {\n  x: 4,\n  y: 10,\n  width: 421,\n  height: 407,\n  xlinkHref: \"data:img/png;base64,\"\n});\n\nvar SvgGithub = function SvgGithub(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: 63.984,\n    height: 63.984,\n    viewBox: \"0 0 430 430\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGithub, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github.19cb03f9.svg\";\nexport { ForwardRef as ReactComponent };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport 'typeface-roboto';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\n\nimport { Switch, Route, Link, HashRouter as Router, Redirect } from \"react-router-dom\";\n\nimport Home from './pgHome'\nimport Publications from './pgPublications'\nimport Benchmarks from './pgBenchmarks'\nimport Download from './pgDownload'\n\nimport { ReactComponent as GithubIcon } from './github.svg';\n\nimport logo1 from './non-stratified.gif'\nimport logo2 from './stratified.gif'\n\nfunction removeExtraSlash(path) {\n  return path.length <= 1 ? path : path.replace(/\\/$/, \"\");\n}\n\nexport default function App() {\n  return (\n    <Router>\n    <React.Fragment>\n      <Grid container justify='center' alignItems='center' style={{ backgroundColor: 'rgb(32,39,42)' }}>\n        {/* I want nothing in title to be selectable or draggable. For not being selectable, I use 'className='disableSelect'. For not being draggable, \n            I use 'draggable={false}', but it does not work on Firefox (it works on the others). I found 'onDragStart={(e) => { e.preventDefault() }}' \n            as a solution on https://stackoverflow.com/questions/26356877/html5-draggable-false-not-working-in-firefox-browser */}\n        <Grid item key='logo-lft' className='disableSelect'><Box display={{ xs: 'none', md: 'block' }}><img src={logo1} width='128px' alt='' draggable={false} onDragStart={(e) => { e.preventDefault() }}/></Box></Grid>\n        <Grid item key='logo-cnt' className='disableSelect' id='logo' style={{ marginTop: '20px', marginBottom: '20px' }} >Statistical Model Checker<br />(STMC)</Grid>\n        <Grid item key='logo-rgt' className='disableSelect'><Box display={{ xs: 'none', md: 'block' }}><img src={logo2} width='128px' alt='' draggable={false} onDragStart={(e) => { e.preventDefault() }}/></Box></Grid>\n      </Grid>\n      <AppBar position='sticky' color=\"default\">\n        <Toolbar variant='dense'>\n          <div style={{ flexGrow: '1' }} />\n          <Route\n            path=\"/\"\n            render={({ location }) => (\n              <Tabs value={removeExtraSlash(location.pathname)} indicatorColor=\"primary\" textColor=\"primary\" centered>\n                <Tab label=\"Home\"         value=\"/\"             component={Link} to=\"/\" />\n                <Tab label=\"Publications\" value=\"/publications\" component={Link} to=\"/publications\" />\n                <Tab label=\"Benchmarks\"   value=\"/benchmarks\"   component={Link} to=\"/benchmarks\"   />\n                <Tab label=\"Download\"     value=\"/download\"     component={Link} to=\"/download\"     />\n              </Tabs>\n            )}\n          />\n          <div style={{ flexGrow: '1' }} />\n          <Tooltip title='View the source on GitHub'>\n            <IconButton size='small' disableFocusRipple={true} onClick={() => { window.open('https://github.com/nima-roohi/STMC'); }}>\n              <GithubIcon style={{ width: '24px', height: '24px' }} />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <Switch>\n        <Route exact path=\"/\"             component={Home}         />\n        <Route       path=\"/publications\" component={Publications} />\n        <Route       path=\"/benchmarks\"   component={Benchmarks}   />\n        <Route       path=\"/download\"     component={Download}     />\n        <Redirect to =\"/\" />\n      </Switch>\n    </React.Fragment>    \n    </Router>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/non-stratified.c9627493.gif\";","module.exports = __webpack_public_path__ + \"static/media/stratified.29072364.gif\";"],"sourceRoot":""}