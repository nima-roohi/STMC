Index.PACKAGES = {"edu" : [], "edu.stmc" : [{"name" : "edu.stmc.HypTest", "shortDescription" : "Same as SimulationMethod from PRISM, with a few default implementations and a few more functions that help testing the class without usingSampler or Expression.", "members_class" : [{"label" : "getResult", "tail" : "(sampler: Sampler): AnyRef", "member" : "edu.stmc.HypTest.getResult", "link" : "edu\/stmc\/HypTest.html#getResult(sampler:simulator.sampler.Sampler):AnyRef", "kind" : "def"}, {"label" : "getProgress", "tail" : "(iters: Int, sampler: Sampler): Int", "member" : "edu.stmc.HypTest.getProgress", "link" : "edu\/stmc\/HypTest.html#getProgress(iters:Int,sampler:simulator.sampler.Sampler):Int", "kind" : "def"}, {"label" : "computeMissingParameterAfterSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterAfterSim", "link" : "edu\/stmc\/HypTest.html#computeMissingParameterAfterSim():Unit", "kind" : "def"}, {"label" : "computeMissingParameterBeforeSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterBeforeSim", "link" : "edu\/stmc\/HypTest.html#computeMissingParameterBeforeSim():Unit", "kind" : "def"}, {"member" : "edu.stmc.HypTest#<init>", "error" : "unsupported entity"}, {"label" : "copy", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.copy", "link" : "edu\/stmc\/HypTest.html#copy():simulator.method.SimulationMethod", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTest.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/HypTest.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "failed_to_reject", "tail" : "(): Boolean", "member" : "edu.stmc.HypTest.failed_to_reject", "link" : "edu\/stmc\/HypTest.html#failed_to_reject:Boolean", "kind" : "abstract def"}, {"label" : "rejected", "tail" : "(): Boolean", "member" : "edu.stmc.HypTest.rejected", "link" : "edu\/stmc\/HypTest.html#rejected:Boolean", "kind" : "abstract def"}, {"label" : "too_close", "tail" : "(): Boolean", "member" : "edu.stmc.HypTest.too_close", "link" : "edu\/stmc\/HypTest.html#too_close:Boolean", "kind" : "abstract def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "edu.stmc.HypTest.completed", "link" : "edu\/stmc\/HypTest.html#completed:Boolean", "kind" : "abstract def"}, {"label" : "update", "tail" : "(positive: Int, negative: Int): Unit", "member" : "edu.stmc.HypTest.update", "link" : "edu\/stmc\/HypTest.html#update(positive:Int,negative:Int):Unit", "kind" : "abstract def"}, {"label" : "update", "tail" : "(positive: Boolean): Unit", "member" : "edu.stmc.HypTest.update", "link" : "edu\/stmc\/HypTest.html#update(positive:Boolean):Unit", "kind" : "abstract def"}, {"label" : "getResultExplanation", "tail" : "(sampler: Sampler): String", "member" : "edu.stmc.HypTest.getResultExplanation", "link" : "edu\/stmc\/HypTest.html#getResultExplanation(sampler:simulator.sampler.Sampler):String", "kind" : "abstract def"}, {"label" : "shouldStopNow", "tail" : "(iters: Int, sampler: Sampler): Boolean", "member" : "edu.stmc.HypTest.shouldStopNow", "link" : "edu\/stmc\/HypTest.html#shouldStopNow(iters:Int,sampler:simulator.sampler.Sampler):Boolean", "kind" : "abstract def"}, {"label" : "getParametersString", "tail" : "(): String", "member" : "edu.stmc.HypTest.getParametersString", "link" : "edu\/stmc\/HypTest.html#getParametersString():String", "kind" : "abstract def"}, {"label" : "getMissingParameter", "tail" : "(): AnyRef", "member" : "edu.stmc.HypTest.getMissingParameter", "link" : "edu\/stmc\/HypTest.html#getMissingParameter():AnyRef", "kind" : "abstract def"}, {"label" : "setExpression", "tail" : "(expr: Expression): Unit", "member" : "edu.stmc.HypTest.setExpression", "link" : "edu\/stmc\/HypTest.html#setExpression(expr:parser.ast.Expression):Unit", "kind" : "abstract def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.reset", "link" : "edu\/stmc\/HypTest.html#reset():Unit", "kind" : "abstract def"}, {"label" : "getFullName", "tail" : "(): String", "member" : "edu.stmc.HypTest.getFullName", "link" : "edu\/stmc\/HypTest.html#getFullName():String", "kind" : "abstract def"}, {"label" : "getName", "tail" : "(): String", "member" : "edu.stmc.HypTest.getName", "link" : "edu\/stmc\/HypTest.html#getName():String", "kind" : "abstract def"}, {"label" : "clone", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.clone", "link" : "edu\/stmc\/HypTest.html#clone():simulator.method.SimulationMethod", "kind" : "abstract def"}], "class" : "edu\/stmc\/HypTest.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestGLRT", "shortDescription" : "Generalized Likelihood Ratio Tests", "members_class" : [{"label" : "failed_to_reject", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestGLRT.failed_to_reject", "link" : "edu\/stmc\/HypTestGLRT.html#failed_to_reject:Boolean", "kind" : "def"}, {"label" : "rejected", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestGLRT.rejected", "link" : "edu\/stmc\/HypTestGLRT.html#rejected:Boolean", "kind" : "def"}, {"label" : "too_close", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestGLRT.too_close", "link" : "edu\/stmc\/HypTestGLRT.html#too_close:Boolean", "kind" : "def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestGLRT.completed", "link" : "edu\/stmc\/HypTestGLRT.html#completed:Boolean", "kind" : "def"}, {"label" : "status", "tail" : "(): Binary", "member" : "edu.stmc.HypTestGLRT.status", "link" : "edu\/stmc\/HypTestGLRT.html#status:edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "status", "tail" : "(N: Int, n: Int): Binary", "member" : "edu.stmc.HypTestGLRT.status", "link" : "edu\/stmc\/HypTestGLRT.html#status(N:Int,n:Int):edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Int, negative: Int): Unit", "member" : "edu.stmc.HypTestGLRT.update", "link" : "edu\/stmc\/HypTestGLRT.html#update(positive:Int,negative:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Boolean): Unit", "member" : "edu.stmc.HypTestGLRT.update", "link" : "edu\/stmc\/HypTestGLRT.html#update(positive:Boolean):Unit", "kind" : "def"}, {"label" : "getMissingParameter", "tail" : "(): Integer", "member" : "edu.stmc.HypTestGLRT.getMissingParameter", "link" : "edu\/stmc\/HypTestGLRT.html#getMissingParameter():Integer", "kind" : "def"}, {"label" : "shouldStopNow", "tail" : "(iters: Int, sampler: Sampler): Boolean", "member" : "edu.stmc.HypTestGLRT.shouldStopNow", "link" : "edu\/stmc\/HypTestGLRT.html#shouldStopNow(iters:Int,sampler:simulator.sampler.Sampler):Boolean", "kind" : "def"}, {"label" : "setExpression", "tail" : "(expr: Expression): Unit", "member" : "edu.stmc.HypTestGLRT.setExpression", "link" : "edu\/stmc\/HypTestGLRT.html#setExpression(expr:parser.ast.Expression):Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): HypTestGLRT", "member" : "edu.stmc.HypTestGLRT.clone", "link" : "edu\/stmc\/HypTestGLRT.html#clone():edu.stmc.HypTestGLRT", "kind" : "def"}, {"label" : "getResultExplanation", "tail" : "(sampler: Sampler): String", "member" : "edu.stmc.HypTestGLRT.getResultExplanation", "link" : "edu\/stmc\/HypTestGLRT.html#getResultExplanation(sampler:simulator.sampler.Sampler):String", "kind" : "def"}, {"label" : "getParametersString", "tail" : "(): String", "member" : "edu.stmc.HypTestGLRT.getParametersString", "link" : "edu\/stmc\/HypTestGLRT.html#getParametersString():String", "kind" : "def"}, {"label" : "getFullName", "tail" : "(): String", "member" : "edu.stmc.HypTestGLRT.getFullName", "link" : "edu\/stmc\/HypTestGLRT.html#getFullName():String", "kind" : "def"}, {"label" : "getName", "tail" : "(): String", "member" : "edu.stmc.HypTestGLRT.getName", "link" : "edu\/stmc\/HypTestGLRT.html#getName():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "edu.stmc.HypTestGLRT.reset", "link" : "edu\/stmc\/HypTestGLRT.html#reset():Unit", "kind" : "def"}, {"label" : "init", "tail" : "(threshold: Double, alpha: Double, beta: Double, minSamples: Int, LB: Boolean): HypTestGLRT", "member" : "edu.stmc.HypTestGLRT.init", "link" : "edu\/stmc\/HypTestGLRT.html#init(threshold:Double,alpha:Double,beta:Double,minSamples:Int,LB:Boolean):edu.stmc.HypTestGLRT", "kind" : "def"}, {"member" : "edu.stmc.HypTestGLRT#<init>", "error" : "unsupported entity"}, {"label" : "getResult", "tail" : "(sampler: Sampler): AnyRef", "member" : "edu.stmc.HypTest.getResult", "link" : "edu\/stmc\/HypTestGLRT.html#getResult(sampler:simulator.sampler.Sampler):AnyRef", "kind" : "def"}, {"label" : "getProgress", "tail" : "(iters: Int, sampler: Sampler): Int", "member" : "edu.stmc.HypTest.getProgress", "link" : "edu\/stmc\/HypTestGLRT.html#getProgress(iters:Int,sampler:simulator.sampler.Sampler):Int", "kind" : "def"}, {"label" : "computeMissingParameterAfterSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterAfterSim", "link" : "edu\/stmc\/HypTestGLRT.html#computeMissingParameterAfterSim():Unit", "kind" : "def"}, {"label" : "computeMissingParameterBeforeSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterBeforeSim", "link" : "edu\/stmc\/HypTestGLRT.html#computeMissingParameterBeforeSim():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.copy", "link" : "edu\/stmc\/HypTestGLRT.html#copy():simulator.method.SimulationMethod", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestGLRT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestGLRT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestGLRT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestGLRT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestGLRT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestGLRT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestGLRT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRT.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestGLRT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestGLRT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/HypTestGLRT.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestGLRT.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestGLRT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestGLRT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestGLRT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestGLRT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestGLRT.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestGLRTTest", "shortDescription" : "", "members_class" : [{"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestGLRTTest.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "edu\/stmc\/HypTestGLRTTest.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "edu\/stmc\/HypTestGLRTTest.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "edu\/stmc\/HypTestGLRTTest.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestGLRTTest.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "edu\/stmc\/HypTestGLRTTest.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "edu\/stmc\/HypTestGLRTTest.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestGLRTTest.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "edu\/stmc\/HypTestGLRTTest.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "edu\/stmc\/HypTestGLRTTest.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestGLRTTest.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "edu\/stmc\/HypTestGLRTTest.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "edu\/stmc\/HypTestGLRTTest.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestGLRTTest.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestGLRTTest.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "edu\/stmc\/HypTestGLRTTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "edu\/stmc\/HypTestGLRTTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "edu\/stmc\/HypTestGLRTTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "edu\/stmc\/HypTestGLRTTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "edu.stmc.HypTestGLRTTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "edu\/stmc\/HypTestGLRTTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "edu\/stmc\/HypTestGLRTTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "edu\/stmc\/HypTestGLRTTest.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "edu\/stmc\/HypTestGLRTTest.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "edu\/stmc\/HypTestGLRTTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "edu\/stmc\/HypTestGLRTTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "edu\/stmc\/HypTestGLRTTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "edu\/stmc\/HypTestGLRTTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "edu\/stmc\/HypTestGLRTTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "edu\/stmc\/HypTestGLRTTest.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "edu\/stmc\/HypTestGLRTTest.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "edu\/stmc\/HypTestGLRTTest.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "edu\/stmc\/HypTestGLRTTest.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "edu\/stmc\/HypTestGLRTTest.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "edu\/stmc\/HypTestGLRTTest.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "edu\/stmc\/HypTestGLRTTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "edu\/stmc\/HypTestGLRTTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "edu\/stmc\/HypTestGLRTTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "edu\/stmc\/HypTestGLRTTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "edu\/stmc\/HypTestGLRTTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "edu\/stmc\/HypTestGLRTTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "edu\/stmc\/HypTestGLRTTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "edu\/stmc\/HypTestGLRTTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "edu\/stmc\/HypTestGLRTTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "edu\/stmc\/HypTestGLRTTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "edu\/stmc\/HypTestGLRTTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "edu\/stmc\/HypTestGLRTTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestGLRTTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestGLRTTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "edu\/stmc\/HypTestGLRTTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "edu\/stmc\/HypTestGLRTTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: â‡’ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "edu\/stmc\/HypTestGLRTTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "edu\/stmc\/HypTestGLRTTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: â‡’ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "edu\/stmc\/HypTestGLRTTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestGLRTTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestGLRTTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestGLRTTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestGLRTTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestGLRTTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestGLRTTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestGLRTTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestGLRTTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: â‡’ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "edu\/stmc\/HypTestGLRTTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "edu\/stmc\/HypTestGLRTTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestGLRTTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestGLRTTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestGLRTTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "edu\/stmc\/HypTestGLRTTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestGLRTTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "edu\/stmc\/HypTestGLRTTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "edu\/stmc\/HypTestGLRTTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "edu\/stmc\/HypTestGLRTTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestGLRTTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestGLRTTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestGLRTTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestGLRTTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestGLRTTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestGLRTTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "edu\/stmc\/HypTestGLRTTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestGLRTTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestGLRTTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestGLRTTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestGLRTTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestGLRTTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestGLRTTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestGLRTTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRTTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRTTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestGLRTTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestGLRTTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestGLRTTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "edu\/stmc\/HypTestGLRTTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestGLRTTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestGLRTTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestGLRTTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestGLRTTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestGLRTTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestGLRTTest.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestSPRT", "shortDescription" : "Sequential Probability Ratio Test", "members_class" : [{"label" : "failed_to_reject", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRT.failed_to_reject", "link" : "edu\/stmc\/HypTestSPRT.html#failed_to_reject:Boolean", "kind" : "def"}, {"label" : "rejected", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRT.rejected", "link" : "edu\/stmc\/HypTestSPRT.html#rejected:Boolean", "kind" : "def"}, {"label" : "too_close", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRT.too_close", "link" : "edu\/stmc\/HypTestSPRT.html#too_close:Boolean", "kind" : "def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRT.completed", "link" : "edu\/stmc\/HypTestSPRT.html#completed:Boolean", "kind" : "def"}, {"label" : "status", "tail" : "(): Binary", "member" : "edu.stmc.HypTestSPRT.status", "link" : "edu\/stmc\/HypTestSPRT.html#status:edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "status", "tail" : "(logT: Double): Binary", "member" : "edu.stmc.HypTestSPRT.status", "link" : "edu\/stmc\/HypTestSPRT.html#status(logT:Double):edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Int, negative: Int): Unit", "member" : "edu.stmc.HypTestSPRT.update", "link" : "edu\/stmc\/HypTestSPRT.html#update(positive:Int,negative:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Boolean): Unit", "member" : "edu.stmc.HypTestSPRT.update", "link" : "edu\/stmc\/HypTestSPRT.html#update(positive:Boolean):Unit", "kind" : "def"}, {"label" : "getMissingParameter", "tail" : "(): Integer", "member" : "edu.stmc.HypTestSPRT.getMissingParameter", "link" : "edu\/stmc\/HypTestSPRT.html#getMissingParameter():Integer", "kind" : "def"}, {"label" : "shouldStopNow", "tail" : "(iters: Int, sampler: Sampler): Boolean", "member" : "edu.stmc.HypTestSPRT.shouldStopNow", "link" : "edu\/stmc\/HypTestSPRT.html#shouldStopNow(iters:Int,sampler:simulator.sampler.Sampler):Boolean", "kind" : "def"}, {"label" : "setExpression", "tail" : "(expr: Expression): Unit", "member" : "edu.stmc.HypTestSPRT.setExpression", "link" : "edu\/stmc\/HypTestSPRT.html#setExpression(expr:parser.ast.Expression):Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): HypTestSPRT", "member" : "edu.stmc.HypTestSPRT.clone", "link" : "edu\/stmc\/HypTestSPRT.html#clone():edu.stmc.HypTestSPRT", "kind" : "def"}, {"label" : "getResultExplanation", "tail" : "(sampler: Sampler): String", "member" : "edu.stmc.HypTestSPRT.getResultExplanation", "link" : "edu\/stmc\/HypTestSPRT.html#getResultExplanation(sampler:simulator.sampler.Sampler):String", "kind" : "def"}, {"label" : "getParametersString", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRT.getParametersString", "link" : "edu\/stmc\/HypTestSPRT.html#getParametersString():String", "kind" : "def"}, {"label" : "getFullName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRT.getFullName", "link" : "edu\/stmc\/HypTestSPRT.html#getFullName():String", "kind" : "def"}, {"label" : "getName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRT.getName", "link" : "edu\/stmc\/HypTestSPRT.html#getName():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "edu.stmc.HypTestSPRT.reset", "link" : "edu\/stmc\/HypTestSPRT.html#reset():Unit", "kind" : "def"}, {"label" : "init", "tail" : "(threshold: Double, alpha: Double, beta: Double, delta: Double, LB: Boolean): HypTestSPRT", "member" : "edu.stmc.HypTestSPRT.init", "link" : "edu\/stmc\/HypTestSPRT.html#init(threshold:Double,alpha:Double,beta:Double,delta:Double,LB:Boolean):edu.stmc.HypTestSPRT", "kind" : "def"}, {"member" : "edu.stmc.HypTestSPRT#<init>", "error" : "unsupported entity"}, {"label" : "getResult", "tail" : "(sampler: Sampler): AnyRef", "member" : "edu.stmc.HypTest.getResult", "link" : "edu\/stmc\/HypTestSPRT.html#getResult(sampler:simulator.sampler.Sampler):AnyRef", "kind" : "def"}, {"label" : "getProgress", "tail" : "(iters: Int, sampler: Sampler): Int", "member" : "edu.stmc.HypTest.getProgress", "link" : "edu\/stmc\/HypTestSPRT.html#getProgress(iters:Int,sampler:simulator.sampler.Sampler):Int", "kind" : "def"}, {"label" : "computeMissingParameterAfterSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterAfterSim", "link" : "edu\/stmc\/HypTestSPRT.html#computeMissingParameterAfterSim():Unit", "kind" : "def"}, {"label" : "computeMissingParameterBeforeSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterBeforeSim", "link" : "edu\/stmc\/HypTestSPRT.html#computeMissingParameterBeforeSim():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.copy", "link" : "edu\/stmc\/HypTestSPRT.html#copy():simulator.method.SimulationMethod", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestSPRT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestSPRT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestSPRT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestSPRT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestSPRT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestSPRT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestSPRT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRT.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestSPRT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestSPRT.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/HypTestSPRT.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestSPRT.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestSPRT.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestSPRT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestSPRT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestSPRT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestSPRT.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestSPRTStratified", "shortDescription" : "Stratified Sequential Probability Ratio Test", "members_class" : [{"label" : "failed_to_reject", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTStratified.failed_to_reject", "link" : "edu\/stmc\/HypTestSPRTStratified.html#failed_to_reject:Boolean", "kind" : "def"}, {"label" : "rejected", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTStratified.rejected", "link" : "edu\/stmc\/HypTestSPRTStratified.html#rejected:Boolean", "kind" : "def"}, {"label" : "too_close", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTStratified.too_close", "link" : "edu\/stmc\/HypTestSPRTStratified.html#too_close:Boolean", "kind" : "def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTStratified.completed", "link" : "edu\/stmc\/HypTestSPRTStratified.html#completed:Boolean", "kind" : "def"}, {"label" : "status", "tail" : "(): Binary", "member" : "edu.stmc.HypTestSPRTStratified.status", "link" : "edu\/stmc\/HypTestSPRTStratified.html#status:edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "status", "tail" : "(mean: Double, M2: Double, iter: Int): Binary", "member" : "edu.stmc.HypTestSPRTStratified.status", "link" : "edu\/stmc\/HypTestSPRTStratified.html#status(mean:Double,M2:Double,iter:Int):edu.stmc.CompResult.Binary", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Int, negative: Int): Unit", "member" : "edu.stmc.HypTestSPRTStratified.update", "link" : "edu\/stmc\/HypTestSPRTStratified.html#update(positive:Int,negative:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Boolean): Unit", "member" : "edu.stmc.HypTestSPRTStratified.update", "link" : "edu\/stmc\/HypTestSPRTStratified.html#update(positive:Boolean):Unit", "kind" : "def"}, {"label" : "getMissingParameter", "tail" : "(): Integer", "member" : "edu.stmc.HypTestSPRTStratified.getMissingParameter", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getMissingParameter():Integer", "kind" : "def"}, {"label" : "shouldStopNow", "tail" : "(iters: Int, sampler: Sampler): Boolean", "member" : "edu.stmc.HypTestSPRTStratified.shouldStopNow", "link" : "edu\/stmc\/HypTestSPRTStratified.html#shouldStopNow(iters:Int,sampler:simulator.sampler.Sampler):Boolean", "kind" : "def"}, {"label" : "setExpression", "tail" : "(expr: Expression): Unit", "member" : "edu.stmc.HypTestSPRTStratified.setExpression", "link" : "edu\/stmc\/HypTestSPRTStratified.html#setExpression(expr:parser.ast.Expression):Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): HypTestSPRTStratified", "member" : "edu.stmc.HypTestSPRTStratified.clone", "link" : "edu\/stmc\/HypTestSPRTStratified.html#clone():edu.stmc.HypTestSPRTStratified", "kind" : "def"}, {"label" : "getResultExplanation", "tail" : "(sampler: Sampler): String", "member" : "edu.stmc.HypTestSPRTStratified.getResultExplanation", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getResultExplanation(sampler:simulator.sampler.Sampler):String", "kind" : "def"}, {"label" : "getParametersString", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTStratified.getParametersString", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getParametersString():String", "kind" : "def"}, {"label" : "getFullName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTStratified.getFullName", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getFullName():String", "kind" : "def"}, {"label" : "getName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTStratified.getName", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getName():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "edu.stmc.HypTestSPRTStratified.reset", "link" : "edu\/stmc\/HypTestSPRTStratified.html#reset():Unit", "kind" : "def"}, {"label" : "init", "tail" : "(threshold: Double, alpha: Double, beta: Double, delta: Double, LB: Boolean): HypTestSPRTStratified", "member" : "edu.stmc.HypTestSPRTStratified.init", "link" : "edu\/stmc\/HypTestSPRTStratified.html#init(threshold:Double,alpha:Double,beta:Double,delta:Double,LB:Boolean):edu.stmc.HypTestSPRTStratified", "kind" : "def"}, {"member" : "edu.stmc.HypTestSPRTStratified#<init>", "error" : "unsupported entity"}, {"label" : "getResult", "tail" : "(sampler: Sampler): AnyRef", "member" : "edu.stmc.HypTest.getResult", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getResult(sampler:simulator.sampler.Sampler):AnyRef", "kind" : "def"}, {"label" : "getProgress", "tail" : "(iters: Int, sampler: Sampler): Int", "member" : "edu.stmc.HypTest.getProgress", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getProgress(iters:Int,sampler:simulator.sampler.Sampler):Int", "kind" : "def"}, {"label" : "computeMissingParameterAfterSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterAfterSim", "link" : "edu\/stmc\/HypTestSPRTStratified.html#computeMissingParameterAfterSim():Unit", "kind" : "def"}, {"label" : "computeMissingParameterBeforeSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterBeforeSim", "link" : "edu\/stmc\/HypTestSPRTStratified.html#computeMissingParameterBeforeSim():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.copy", "link" : "edu\/stmc\/HypTestSPRTStratified.html#copy():simulator.method.SimulationMethod", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestSPRTStratified.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestSPRTStratified.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestSPRTStratified.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestSPRTStratified.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestSPRTStratified.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestSPRTStratified.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestSPRTStratified.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTStratified.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTStratified.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTStratified.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestSPRTStratified.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestSPRTStratified.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/HypTestSPRTStratified.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestSPRTStratified.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestSPRTStratified.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestSPRTStratified.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestSPRTStratified.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestSPRTStratified.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestSPRTStratified.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestSPRTTernary", "shortDescription" : "Ternary Sequential Probability Ratio Test", "members_class" : [{"label" : "failed_to_reject", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTTernary.failed_to_reject", "link" : "edu\/stmc\/HypTestSPRTTernary.html#failed_to_reject:Boolean", "kind" : "def"}, {"label" : "rejected", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTTernary.rejected", "link" : "edu\/stmc\/HypTestSPRTTernary.html#rejected:Boolean", "kind" : "def"}, {"label" : "too_close", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTTernary.too_close", "link" : "edu\/stmc\/HypTestSPRTTernary.html#too_close:Boolean", "kind" : "def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "edu.stmc.HypTestSPRTTernary.completed", "link" : "edu\/stmc\/HypTestSPRTTernary.html#completed:Boolean", "kind" : "def"}, {"label" : "status", "tail" : "(): Ternary", "member" : "edu.stmc.HypTestSPRTTernary.status", "link" : "edu\/stmc\/HypTestSPRTTernary.html#status:edu.stmc.CompResult.Ternary", "kind" : "def"}, {"label" : "status", "tail" : "(lb: Binary, ub: Binary): Ternary", "member" : "edu.stmc.HypTestSPRTTernary.status", "link" : "edu\/stmc\/HypTestSPRTTernary.html#status(lb:edu.stmc.CompResult.Binary,ub:edu.stmc.CompResult.Binary):edu.stmc.CompResult.Ternary", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Int, negative: Int): Unit", "member" : "edu.stmc.HypTestSPRTTernary.update", "link" : "edu\/stmc\/HypTestSPRTTernary.html#update(positive:Int,negative:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(positive: Boolean): Unit", "member" : "edu.stmc.HypTestSPRTTernary.update", "link" : "edu\/stmc\/HypTestSPRTTernary.html#update(positive:Boolean):Unit", "kind" : "def"}, {"label" : "getResult", "tail" : "(sampler: Sampler): AnyRef", "member" : "edu.stmc.HypTestSPRTTernary.getResult", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getResult(sampler:simulator.sampler.Sampler):AnyRef", "kind" : "def"}, {"label" : "getMissingParameter", "tail" : "(): Integer", "member" : "edu.stmc.HypTestSPRTTernary.getMissingParameter", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getMissingParameter():Integer", "kind" : "def"}, {"label" : "shouldStopNow", "tail" : "(iters: Int, sampler: Sampler): Boolean", "member" : "edu.stmc.HypTestSPRTTernary.shouldStopNow", "link" : "edu\/stmc\/HypTestSPRTTernary.html#shouldStopNow(iters:Int,sampler:simulator.sampler.Sampler):Boolean", "kind" : "def"}, {"label" : "setExpression", "tail" : "(expr: Expression): Unit", "member" : "edu.stmc.HypTestSPRTTernary.setExpression", "link" : "edu\/stmc\/HypTestSPRTTernary.html#setExpression(expr:parser.ast.Expression):Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): HypTestSPRTTernary", "member" : "edu.stmc.HypTestSPRTTernary.clone", "link" : "edu\/stmc\/HypTestSPRTTernary.html#clone():edu.stmc.HypTestSPRTTernary", "kind" : "def"}, {"label" : "getResultExplanation", "tail" : "(sampler: Sampler): String", "member" : "edu.stmc.HypTestSPRTTernary.getResultExplanation", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getResultExplanation(sampler:simulator.sampler.Sampler):String", "kind" : "def"}, {"label" : "getParametersString", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTTernary.getParametersString", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getParametersString():String", "kind" : "def"}, {"label" : "getFullName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTTernary.getFullName", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getFullName():String", "kind" : "def"}, {"label" : "getName", "tail" : "(): String", "member" : "edu.stmc.HypTestSPRTTernary.getName", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getName():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "edu.stmc.HypTestSPRTTernary.reset", "link" : "edu\/stmc\/HypTestSPRTTernary.html#reset():Unit", "kind" : "def"}, {"label" : "init", "tail" : "(threshold: Double, alpha: Double, beta: Double, gamma: Double, delta: Double, LB: Boolean): HypTestSPRTTernary", "member" : "edu.stmc.HypTestSPRTTernary.init", "link" : "edu\/stmc\/HypTestSPRTTernary.html#init(threshold:Double,alpha:Double,beta:Double,gamma:Double,delta:Double,LB:Boolean):edu.stmc.HypTestSPRTTernary", "kind" : "def"}, {"member" : "edu.stmc.HypTestSPRTTernary#<init>", "error" : "unsupported entity"}, {"label" : "getProgress", "tail" : "(iters: Int, sampler: Sampler): Int", "member" : "edu.stmc.HypTest.getProgress", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getProgress(iters:Int,sampler:simulator.sampler.Sampler):Int", "kind" : "def"}, {"label" : "computeMissingParameterAfterSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterAfterSim", "link" : "edu\/stmc\/HypTestSPRTTernary.html#computeMissingParameterAfterSim():Unit", "kind" : "def"}, {"label" : "computeMissingParameterBeforeSim", "tail" : "(): Unit", "member" : "edu.stmc.HypTest.computeMissingParameterBeforeSim", "link" : "edu\/stmc\/HypTestSPRTTernary.html#computeMissingParameterBeforeSim():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): SimulationMethod", "member" : "simulator.method.SimulationMethod.copy", "link" : "edu\/stmc\/HypTestSPRTTernary.html#copy():simulator.method.SimulationMethod", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestSPRTTernary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestSPRTTernary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestSPRTTernary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestSPRTTernary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestSPRTTernary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestSPRTTernary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestSPRTTernary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTernary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTernary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTernary.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestSPRTTernary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestSPRTTernary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/HypTestSPRTTernary.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestSPRTTernary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestSPRTTernary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestSPRTTernary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestSPRTTernary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestSPRTTernary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestSPRTTernary.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestSPRTTest", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.Matchers.RegexWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.StringShouldWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.Matchers.AnyShouldWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForCollectedString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForCollectedString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForCollectedString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfCollectedAny", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedArray", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfBeWordForCollectedArray[T<:<?>]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForCollectedAny", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfContainWordForCollectedAny", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfNotWordForCollectedAny", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfHaveWordForExtent", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.Matchers.TheSameInstanceAsPhrase", "link" : "edu\/stmc\/HypTestSPRTTest.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.Matchers.AnWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.Matchers.AWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.Matchers.ValueWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.Matchers.KeyWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfFullyMatchWordForString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfEndWithWordForString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfStartWithWordForString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfIncludeWordForString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.Matchers.RegexWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.Matchers.ResultOfBeWordForAny", "link" : "edu\/stmc\/HypTestSPRTTest.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.Matchers.HavePropertyMatcherGenerator", "link" : "edu\/stmc\/HypTestSPRTTest.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "edu\/stmc\/HypTestSPRTTest.html#DeterminedByEquivalence[T<:<?>]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "edu\/stmc\/HypTestSPRTTest.html#DecidedByEquality[A<:<?>]extendsEquality[A]", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "edu\/stmc\/HypTestSPRTTest.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "edu\/stmc\/HypTestSPRTTest.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "edu\/stmc\/HypTestSPRTTest.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "edu\/stmc\/HypTestSPRTTest.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "edu\/stmc\/HypTestSPRTTest.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "edu\/stmc\/HypTestSPRTTest.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestSPRTTest.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestSPRTTest.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "edu\/stmc\/HypTestSPRTTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "edu\/stmc\/HypTestSPRTTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "edu\/stmc\/HypTestSPRTTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "edu\/stmc\/HypTestSPRTTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "BeInRange", "tail" : "", "member" : "edu.stmc.HypTestSPRTTest.BeInRange", "link" : "edu\/stmc\/HypTestSPRTTest.html#BeInRangeextendsMatcher[Int]", "kind" : "class"}, {"label" : "beInRange", "tail" : "(lb: Int, ub: Int): BeInRange", "member" : "edu.stmc.HypTestSPRTTest.beInRange", "link" : "edu\/stmc\/HypTestSPRTTest.html#beInRange(lb:Int,ub:Int):HypTestSPRTTest.this.BeInRange", "kind" : "def"}, {"member" : "edu.stmc.HypTestSPRTTest#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.Matchers.of", "link" : "edu\/stmc\/HypTestSPRTTest.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.Matchers.convertToRegexWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.Matchers.convertToStringShouldWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.Matchers.convertToAnyShouldWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.Matchers.the", "link" : "edu\/stmc\/HypTestSPRTTest.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.Matchers.an", "link" : "edu\/stmc\/HypTestSPRTTest.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.Matchers.a", "link" : "edu\/stmc\/HypTestSPRTTest.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.words.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atMost", "link" : "edu\/stmc\/HypTestSPRTTest.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atMost", "link" : "edu\/stmc\/HypTestSPRTTest.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atMost", "link" : "edu\/stmc\/HypTestSPRTTest.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.between", "link" : "edu\/stmc\/HypTestSPRTTest.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.between", "link" : "edu\/stmc\/HypTestSPRTTest.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.between", "link" : "edu\/stmc\/HypTestSPRTTest.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.no", "link" : "edu\/stmc\/HypTestSPRTTest.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.no", "link" : "edu\/stmc\/HypTestSPRTTest.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.no", "link" : "edu\/stmc\/HypTestSPRTTest.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.exactly", "link" : "edu\/stmc\/HypTestSPRTTest.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.exactly", "link" : "edu\/stmc\/HypTestSPRTTest.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.exactly", "link" : "edu\/stmc\/HypTestSPRTTest.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.every", "link" : "edu\/stmc\/HypTestSPRTTest.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.every", "link" : "edu\/stmc\/HypTestSPRTTest.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.every", "link" : "edu\/stmc\/HypTestSPRTTest.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.atLeast", "link" : "edu\/stmc\/HypTestSPRTTest.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.atLeast", "link" : "edu\/stmc\/HypTestSPRTTest.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.atLeast", "link" : "edu\/stmc\/HypTestSPRTTest.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.Matchers.all", "link" : "edu\/stmc\/HypTestSPRTTest.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.Matchers.all", "link" : "edu\/stmc\/HypTestSPRTTest.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.Matchers.all", "link" : "edu\/stmc\/HypTestSPRTTest.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.Matchers.message", "link" : "edu\/stmc\/HypTestSPRTTest.html#message(expectedMessage:String):org.scalatest.words.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: â‡’ Any): ResultOfThrownByApplication", "member" : "org.scalatest.Matchers.thrownBy", "link" : "edu\/stmc\/HypTestSPRTTest.html#thrownBy(fun:=>Any):org.scalatest.words.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.Matchers.atMostOneElementOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.Matchers.atMostOneOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.Matchers.inOrderElementsOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.Matchers.inOrder", "link" : "edu\/stmc\/HypTestSPRTTest.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.Matchers.allElementsOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.words.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.Matchers.allOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.Matchers.inOrderOnly", "link" : "edu\/stmc\/HypTestSPRTTest.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.Matchers.only", "link" : "edu\/stmc\/HypTestSPRTTest.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.Matchers.theSameElementsInOrderAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.Matchers.theSameElementsAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.words.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.Matchers.noElementsOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.Matchers.noneOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.Matchers.atLeastOneElementOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.Matchers.atLeastOneOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.Matchers.oneElementOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.words.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.Matchers.oneOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.words.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.Matchers.definedAt", "link" : "edu\/stmc\/HypTestSPRTTest.html#definedAt[T](right:T):org.scalatest.words.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.>=", "link" : "edu\/stmc\/HypTestSPRTTest.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.words.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.Matchers.<=", "link" : "edu\/stmc\/HypTestSPRTTest.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.words.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.Matchers.>", "link" : "edu\/stmc\/HypTestSPRTTest.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.words.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.Matchers.<", "link" : "edu\/stmc\/HypTestSPRTTest.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.words.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.Matchers.regex", "link" : "edu\/stmc\/HypTestSPRTTest.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.Matchers.theSameInstanceAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.Matchers.an", "link" : "edu\/stmc\/HypTestSPRTTest.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.Matchers.a", "link" : "edu\/stmc\/HypTestSPRTTest.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.Matchers.value", "link" : "edu\/stmc\/HypTestSPRTTest.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.Matchers.key", "link" : "edu\/stmc\/HypTestSPRTTest.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.Matchers.equal", "link" : "edu\/stmc\/HypTestSPRTTest.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.Matchers.equal", "link" : "edu\/stmc\/HypTestSPRTTest.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "edu\/stmc\/HypTestSPRTTest.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "edu\/stmc\/HypTestSPRTTest.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "edu\/stmc\/HypTestSPRTTest.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.words.MatcherWords.equal", "link" : "edu\/stmc\/HypTestSPRTTest.html#equal(right:Any):org.scalatest.matchers.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.words.MatcherWords.matchPattern", "link" : "edu\/stmc\/HypTestSPRTTest.html#matchPattern:org.scalatest.words.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.words.MatcherWords.typeCheck", "link" : "edu\/stmc\/HypTestSPRTTest.html#typeCheck:org.scalatest.words.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.words.MatcherWords.compile", "link" : "edu\/stmc\/HypTestSPRTTest.html#compile:org.scalatest.words.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.words.MatcherWords.empty", "link" : "edu\/stmc\/HypTestSPRTTest.html#empty:org.scalatest.words.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.words.MatcherWords.writable", "link" : "edu\/stmc\/HypTestSPRTTest.html#writable:org.scalatest.words.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.words.MatcherWords.readable", "link" : "edu\/stmc\/HypTestSPRTTest.html#readable:org.scalatest.words.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.words.MatcherWords.exist", "link" : "edu\/stmc\/HypTestSPRTTest.html#exist:org.scalatest.words.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.words.MatcherWords.noException", "link" : "edu\/stmc\/HypTestSPRTTest.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.words.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.words.MatcherWords.defined", "link" : "edu\/stmc\/HypTestSPRTTest.html#defined:org.scalatest.words.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.words.MatcherWords.sorted", "link" : "edu\/stmc\/HypTestSPRTTest.html#sorted:org.scalatest.words.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.words.MatcherWords.size", "link" : "edu\/stmc\/HypTestSPRTTest.html#size:org.scalatest.words.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.words.MatcherWords.length", "link" : "edu\/stmc\/HypTestSPRTTest.html#length:org.scalatest.words.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.words.MatcherWords.not", "link" : "edu\/stmc\/HypTestSPRTTest.html#not:org.scalatest.words.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.words.MatcherWords.contain", "link" : "edu\/stmc\/HypTestSPRTTest.html#contain:org.scalatest.words.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.words.MatcherWords.be", "link" : "edu\/stmc\/HypTestSPRTTest.html#be:org.scalatest.words.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.words.MatcherWords.have", "link" : "edu\/stmc\/HypTestSPRTTest.html#have:org.scalatest.words.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.words.MatcherWords.include", "link" : "edu\/stmc\/HypTestSPRTTest.html#include:org.scalatest.words.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.words.MatcherWords.endWith", "link" : "edu\/stmc\/HypTestSPRTTest.html#endWith:org.scalatest.words.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.words.MatcherWords.startWith", "link" : "edu\/stmc\/HypTestSPRTTest.html#startWith:org.scalatest.words.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.words.MatcherWords.fullyMatch", "link" : "edu\/stmc\/HypTestSPRTTest.html#fullyMatch:org.scalatest.words.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "edu\/stmc\/HypTestSPRTTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "edu\/stmc\/HypTestSPRTTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "edu\/stmc\/HypTestSPRTTest.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "edu\/stmc\/HypTestSPRTTest.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "edu\/stmc\/HypTestSPRTTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "edu\/stmc\/HypTestSPRTTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "edu\/stmc\/HypTestSPRTTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "edu\/stmc\/HypTestSPRTTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "edu\/stmc\/HypTestSPRTTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "edu\/stmc\/HypTestSPRTTest.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "edu\/stmc\/HypTestSPRTTest.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "edu\/stmc\/HypTestSPRTTest.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "edu\/stmc\/HypTestSPRTTest.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "edu\/stmc\/HypTestSPRTTest.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "edu\/stmc\/HypTestSPRTTest.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "edu\/stmc\/HypTestSPRTTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "edu\/stmc\/HypTestSPRTTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "edu\/stmc\/HypTestSPRTTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "edu\/stmc\/HypTestSPRTTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "edu\/stmc\/HypTestSPRTTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "edu\/stmc\/HypTestSPRTTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "edu\/stmc\/HypTestSPRTTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "edu\/stmc\/HypTestSPRTTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "edu\/stmc\/HypTestSPRTTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "edu\/stmc\/HypTestSPRTTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "edu\/stmc\/HypTestSPRTTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "edu\/stmc\/HypTestSPRTTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestSPRTTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestSPRTTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "edu\/stmc\/HypTestSPRTTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "edu\/stmc\/HypTestSPRTTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: â‡’ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "edu\/stmc\/HypTestSPRTTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "edu\/stmc\/HypTestSPRTTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: â‡’ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "edu\/stmc\/HypTestSPRTTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestSPRTTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestSPRTTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestSPRTTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestSPRTTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestSPRTTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestSPRTTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestSPRTTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestSPRTTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: â‡’ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "edu\/stmc\/HypTestSPRTTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "edu\/stmc\/HypTestSPRTTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestSPRTTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestSPRTTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestSPRTTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "edu\/stmc\/HypTestSPRTTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestSPRTTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "edu\/stmc\/HypTestSPRTTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "edu\/stmc\/HypTestSPRTTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "edu\/stmc\/HypTestSPRTTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestSPRTTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestSPRTTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestSPRTTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestSPRTTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestSPRTTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestSPRTTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "edu\/stmc\/HypTestSPRTTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestSPRTTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestSPRTTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestSPRTTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestSPRTTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestSPRTTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestSPRTTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestSPRTTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestSPRTTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestSPRTTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestSPRTTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "edu\/stmc\/HypTestSPRTTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestSPRTTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestSPRTTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestSPRTTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestSPRTTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestSPRTTest.html", "kind" : "class"}, {"name" : "edu.stmc.HypTestTSPRTTest", "shortDescription" : "", "members_class" : [{"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestTSPRTTest.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.FlatSpecLike.InAndIgnoreMethods", "link" : "edu\/stmc\/HypTestTSPRTTest.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyWord", "link" : "edu\/stmc\/HypTestTSPRTTest.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbString", "link" : "edu\/stmc\/HypTestTSPRTTest.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.TheyVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestTSPRTTest.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreWord", "link" : "edu\/stmc\/HypTestTSPRTTest.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbString", "link" : "edu\/stmc\/HypTestTSPRTTest.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestTSPRTTest.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItWord", "link" : "edu\/stmc\/HypTestTSPRTTest.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbString", "link" : "edu\/stmc\/HypTestTSPRTTest.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.FlatSpecLike.ItVerbStringTaggedAs", "link" : "edu\/stmc\/HypTestTSPRTTest.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.FlatSpecLike.BehaviorWord", "link" : "edu\/stmc\/HypTestTSPRTTest.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "edu\/stmc\/HypTestTSPRTTest.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestTSPRTTest.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestTSPRTTest.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "edu\/stmc\/HypTestTSPRTTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "edu\/stmc\/HypTestTSPRTTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "edu\/stmc\/HypTestTSPRTTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "edu\/stmc\/HypTestTSPRTTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "edu.stmc.HypTestTSPRTTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FlatSpec.toString", "link" : "edu\/stmc\/HypTestTSPRTTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FlatSpecLike.testDataFor", "link" : "edu\/stmc\/HypTestTSPRTTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FlatSpecLike.styleName", "link" : "edu\/stmc\/HypTestTSPRTTest.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FlatSpecLike.behave", "link" : "edu\/stmc\/HypTestTSPRTTest.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.run", "link" : "edu\/stmc\/HypTestTSPRTTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FlatSpecLike.testNames", "link" : "edu\/stmc\/HypTestTSPRTTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTests", "link" : "edu\/stmc\/HypTestTSPRTTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FlatSpecLike.runTest", "link" : "edu\/stmc\/HypTestTSPRTTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FlatSpecLike.tags", "link" : "edu\/stmc\/HypTestTSPRTTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "edu\/stmc\/HypTestTSPRTTest.html#shorthandSharedTestRegistrationFunction:org.scalatest.words.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.FlatSpecLike.shorthandTestRegistrationFunction", "link" : "edu\/stmc\/HypTestTSPRTTest.html#shorthandTestRegistrationFunction:org.scalatest.words.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.words.ResultOfTaggedAsInvocation):FlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): InAndIgnoreMethods", "member" : "org.scalatest.FlatSpecLike.convertToInAndIgnoreMethods", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.words.ResultOfStringPassedToVerb):FlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.FlatSpecLike.they", "link" : "edu\/stmc\/HypTestTSPRTTest.html#they:FlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": IgnoreWord", "member" : "org.scalatest.FlatSpecLike.ignore", "link" : "edu\/stmc\/HypTestTSPRTTest.html#ignore:FlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.FlatSpecLike.it", "link" : "edu\/stmc\/HypTestTSPRTTest.html#it:FlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": BehaviorWord", "member" : "org.scalatest.FlatSpecLike.behavior", "link" : "edu\/stmc\/HypTestTSPRTTest.html#behavior:FlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerIgnoredTest", "link" : "edu\/stmc\/HypTestTSPRTTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Any)(pos: Position): Unit", "member" : "org.scalatest.FlatSpecLike.registerTest", "link" : "edu\/stmc\/HypTestTSPRTTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FlatSpecLike.markup", "link" : "edu\/stmc\/HypTestTSPRTTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FlatSpecLike.alert", "link" : "edu\/stmc\/HypTestTSPRTTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FlatSpecLike.note", "link" : "edu\/stmc\/HypTestTSPRTTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FlatSpecLike.info", "link" : "edu\/stmc\/HypTestTSPRTTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "edu\/stmc\/HypTestTSPRTTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "edu\/stmc\/HypTestTSPRTTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "edu\/stmc\/HypTestTSPRTTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "edu\/stmc\/HypTestTSPRTTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "edu\/stmc\/HypTestTSPRTTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "edu\/stmc\/HypTestTSPRTTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestTSPRTTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "edu\/stmc\/HypTestTSPRTTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "edu\/stmc\/HypTestTSPRTTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "edu\/stmc\/HypTestTSPRTTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: â‡’ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "edu\/stmc\/HypTestTSPRTTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "edu\/stmc\/HypTestTSPRTTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: â‡’ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "edu\/stmc\/HypTestTSPRTTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestTSPRTTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestTSPRTTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestTSPRTTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "edu\/stmc\/HypTestTSPRTTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestTSPRTTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestTSPRTTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestTSPRTTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "edu\/stmc\/HypTestTSPRTTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: â‡’ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "edu\/stmc\/HypTestTSPRTTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "edu\/stmc\/HypTestTSPRTTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "edu\/stmc\/HypTestTSPRTTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "edu\/stmc\/HypTestTSPRTTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "edu\/stmc\/HypTestTSPRTTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "edu\/stmc\/HypTestTSPRTTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestTSPRTTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestTSPRTTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestTSPRTTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestTSPRTTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "edu\/stmc\/HypTestTSPRTTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "edu\/stmc\/HypTestTSPRTTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "edu\/stmc\/HypTestTSPRTTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/HypTestTSPRTTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/HypTestTSPRTTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/HypTestTSPRTTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/HypTestTSPRTTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/HypTestTSPRTTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/HypTestTSPRTTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/HypTestTSPRTTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestTSPRTTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestTSPRTTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/HypTestTSPRTTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/HypTestTSPRTTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/HypTestTSPRTTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "edu\/stmc\/HypTestTSPRTTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/HypTestTSPRTTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/HypTestTSPRTTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/HypTestTSPRTTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/HypTestTSPRTTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/HypTestTSPRTTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/HypTestTSPRTTest.html", "kind" : "class"}, {"name" : "edu.stmc.SimulatorEngineStratified", "shortDescription" : "", "members_class" : [{"label" : "doSampling", "tail" : "(initialState: State, maxPathLength: Long): Unit", "member" : "edu.stmc.SimulatorEngineStratified.doSampling", "link" : "edu\/stmc\/SimulatorEngineStratified.html#doSampling(initialState:parser.State,maxPathLength:Long):Unit", "kind" : "def"}, {"label" : "modelCheckMultipleProperties", "tail" : "(modulesFile: ModulesFile, propertiesFile: PropertiesFile, exprs: List[Expression], initialState: State, maxPathLength: Long, simMethod: SimulationMethod): Array[AnyRef]", "member" : "edu.stmc.SimulatorEngineStratified.modelCheckMultipleProperties", "link" : "edu\/stmc\/SimulatorEngineStratified.html#modelCheckMultipleProperties(modulesFile:parser.ast.ModulesFile,propertiesFile:parser.ast.PropertiesFile,exprs:java.util.List[parser.ast.Expression],initialState:parser.State,maxPathLength:Long,simMethod:simulator.method.SimulationMethod):Array[AnyRef]", "kind" : "def"}, {"member" : "edu.stmc.SimulatorEngineStratified#<init>", "error" : "unsupported entity"}, {"label" : "stopSampling", "tail" : "(): Unit", "member" : "simulator.SimulatorEngine.stopSampling", "link" : "edu\/stmc\/SimulatorEngineStratified.html#stopSampling():Unit", "kind" : "def"}, {"label" : "modelCheckExperiment", "tail" : "(arg0: ModulesFile, arg1: PropertiesFile, arg2: UndefinedConstants, arg3: ResultsCollection, arg4: Expression, arg5: State, arg6: Long, arg7: SimulationMethod): Unit", "member" : "simulator.SimulatorEngine.modelCheckExperiment", "link" : "edu\/stmc\/SimulatorEngineStratified.html#modelCheckExperiment(x$1:parser.ast.ModulesFile,x$2:parser.ast.PropertiesFile,x$3:prism.UndefinedConstants,x$4:prism.ResultsCollection,x$5:parser.ast.Expression,x$6:parser.State,x$7:Long,x$8:simulator.method.SimulationMethod):Unit", "kind" : "def"}, {"label" : "modelCheckSingleProperty", "tail" : "(arg0: ModulesFile, arg1: PropertiesFile, arg2: Expression, arg3: State, arg4: Long, arg5: SimulationMethod): AnyRef", "member" : "simulator.SimulatorEngine.modelCheckSingleProperty", "link" : "edu\/stmc\/SimulatorEngineStratified.html#modelCheckSingleProperty(x$1:parser.ast.ModulesFile,x$2:parser.ast.PropertiesFile,x$3:parser.ast.Expression,x$4:parser.State,x$5:Long,x$6:simulator.method.SimulationMethod):Object", "kind" : "def"}, {"label" : "checkPropertyForSimulation", "tail" : "(arg0: Expression): Unit", "member" : "simulator.SimulatorEngine.checkPropertyForSimulation", "link" : "edu\/stmc\/SimulatorEngineStratified.html#checkPropertyForSimulation(x$1:parser.ast.Expression):Unit", "kind" : "def"}, {"label" : "isPropertyOKForSimulation", "tail" : "(arg0: Expression): Boolean", "member" : "simulator.SimulatorEngine.isPropertyOKForSimulation", "link" : "edu\/stmc\/SimulatorEngineStratified.html#isPropertyOKForSimulation(x$1:parser.ast.Expression):Boolean", "kind" : "def"}, {"label" : "plotPath", "tail" : "(arg0: Graph): Unit", "member" : "simulator.SimulatorEngine.plotPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#plotPath(x$1:userinterface.graph.Graph):Unit", "kind" : "def"}, {"label" : "exportPath", "tail" : "(arg0: File, arg1: Boolean, arg2: Boolean, arg3: String, arg4: ArrayList[Integer]): Unit", "member" : "simulator.SimulatorEngine.exportPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#exportPath(x$1:java.io.File,x$2:Boolean,x$3:Boolean,x$4:String,x$5:java.util.ArrayList[Integer]):Unit", "kind" : "def"}, {"label" : "exportPath", "tail" : "(arg0: File, arg1: Boolean, arg2: String, arg3: ArrayList[Integer]): Unit", "member" : "simulator.SimulatorEngine.exportPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#exportPath(x$1:java.io.File,x$2:Boolean,x$3:String,x$4:java.util.ArrayList[Integer]):Unit", "kind" : "def"}, {"label" : "exportPath", "tail" : "(arg0: File, arg1: Boolean): Unit", "member" : "simulator.SimulatorEngine.exportPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#exportPath(x$1:java.io.File,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "exportPath", "tail" : "(arg0: File): Unit", "member" : "simulator.SimulatorEngine.exportPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#exportPath(x$1:java.io.File):Unit", "kind" : "def"}, {"label" : "loopEnd", "tail" : "(): Long", "member" : "simulator.SimulatorEngine.loopEnd", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loopEnd():Long", "kind" : "def"}, {"label" : "loopStart", "tail" : "(): Long", "member" : "simulator.SimulatorEngine.loopStart", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loopStart():Long", "kind" : "def"}, {"label" : "isPathLooping", "tail" : "(): Boolean", "member" : "simulator.SimulatorEngine.isPathLooping", "link" : "edu\/stmc\/SimulatorEngineStratified.html#isPathLooping():Boolean", "kind" : "def"}, {"label" : "getTransitionRewardOfPathStep", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "simulator.SimulatorEngine.getTransitionRewardOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionRewardOfPathStep(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "getModuleOrActionOfPathStep", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getModuleOrActionOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getModuleOrActionOfPathStep(x$1:Int):String", "kind" : "def"}, {"label" : "getModuleOrActionIndexOfPathStep", "tail" : "(arg0: Int): Int", "member" : "simulator.SimulatorEngine.getModuleOrActionIndexOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getModuleOrActionIndexOfPathStep(x$1:Int):Int", "kind" : "def"}, {"label" : "getChoiceOfPathStep", "tail" : "(arg0: Int): Int", "member" : "simulator.SimulatorEngine.getChoiceOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getChoiceOfPathStep(x$1:Int):Int", "kind" : "def"}, {"label" : "getTimeSpentInPathStep", "tail" : "(arg0: Int): Double", "member" : "simulator.SimulatorEngine.getTimeSpentInPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTimeSpentInPathStep(x$1:Int):Double", "kind" : "def"}, {"label" : "getCumulativeRewardUpToPathStep", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "simulator.SimulatorEngine.getCumulativeRewardUpToPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getCumulativeRewardUpToPathStep(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "getCumulativeTimeUpToPathStep", "tail" : "(arg0: Int): Double", "member" : "simulator.SimulatorEngine.getCumulativeTimeUpToPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getCumulativeTimeUpToPathStep(x$1:Int):Double", "kind" : "def"}, {"label" : "getStateRewardOfPathStep", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "simulator.SimulatorEngine.getStateRewardOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getStateRewardOfPathStep(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "getStateOfPathStep", "tail" : "(arg0: Int): State", "member" : "simulator.SimulatorEngine.getStateOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getStateOfPathStep(x$1:Int):parser.State", "kind" : "def"}, {"label" : "getVariableValueOfPathStep", "tail" : "(arg0: Int, arg1: Int): AnyRef", "member" : "simulator.SimulatorEngine.getVariableValueOfPathStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getVariableValueOfPathStep(x$1:Int,x$2:Int):Object", "kind" : "def"}, {"label" : "getPathFull", "tail" : "(): PathFull", "member" : "simulator.SimulatorEngine.getPathFull", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getPathFull():simulator.PathFull", "kind" : "def"}, {"label" : "getTotalCumulativeRewardForPath", "tail" : "(arg0: Int): Double", "member" : "simulator.SimulatorEngine.getTotalCumulativeRewardForPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTotalCumulativeRewardForPath(x$1:Int):Double", "kind" : "def"}, {"label" : "getTotalTimeForPath", "tail" : "(): Double", "member" : "simulator.SimulatorEngine.getTotalTimeForPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTotalTimeForPath():Double", "kind" : "def"}, {"label" : "getPreviousState", "tail" : "(): State", "member" : "simulator.SimulatorEngine.getPreviousState", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getPreviousState():parser.State", "kind" : "def"}, {"label" : "getCurrentState", "tail" : "(): State", "member" : "simulator.SimulatorEngine.getCurrentState", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getCurrentState():parser.State", "kind" : "def"}, {"label" : "getPathSize", "tail" : "(): Long", "member" : "simulator.SimulatorEngine.getPathSize", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getPathSize():Long", "kind" : "def"}, {"label" : "getPath", "tail" : "(): Path", "member" : "simulator.SimulatorEngine.getPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getPath():simulator.Path", "kind" : "def"}, {"label" : "computeTransitionTarget", "tail" : "(arg0: Int): State", "member" : "simulator.SimulatorEngine.computeTransitionTarget", "link" : "edu\/stmc\/SimulatorEngineStratified.html#computeTransitionTarget(x$1:Int):parser.State", "kind" : "def"}, {"label" : "computeTransitionTarget", "tail" : "(arg0: Int, arg1: Int): State", "member" : "simulator.SimulatorEngine.computeTransitionTarget", "link" : "edu\/stmc\/SimulatorEngineStratified.html#computeTransitionTarget(x$1:Int,x$2:Int):parser.State", "kind" : "def"}, {"label" : "getTransitionUpdateStringFull", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getTransitionUpdateStringFull", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionUpdateStringFull(x$1:Int):String", "kind" : "def"}, {"label" : "getTransitionUpdateString", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getTransitionUpdateString", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionUpdateString(x$1:Int):String", "kind" : "def"}, {"label" : "getTransitionProbability", "tail" : "(arg0: Int): Double", "member" : "simulator.SimulatorEngine.getTransitionProbability", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionProbability(x$1:Int):Double", "kind" : "def"}, {"label" : "getTransitionProbability", "tail" : "(arg0: Int, arg1: Int): Double", "member" : "simulator.SimulatorEngine.getTransitionProbability", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionProbability(x$1:Int,x$2:Int):Double", "kind" : "def"}, {"label" : "getTransitionAction", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getTransitionAction", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionAction(x$1:Int):String", "kind" : "def"}, {"label" : "getTransitionAction", "tail" : "(arg0: Int, arg1: Int): String", "member" : "simulator.SimulatorEngine.getTransitionAction", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionAction(x$1:Int,x$2:Int):String", "kind" : "def"}, {"label" : "getTransitionModuleOrActionIndex", "tail" : "(arg0: Int): Int", "member" : "simulator.SimulatorEngine.getTransitionModuleOrActionIndex", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionModuleOrActionIndex(x$1:Int):Int", "kind" : "def"}, {"label" : "getTransitionModuleOrActionIndex", "tail" : "(arg0: Int, arg1: Int): Int", "member" : "simulator.SimulatorEngine.getTransitionModuleOrActionIndex", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionModuleOrActionIndex(x$1:Int,x$2:Int):Int", "kind" : "def"}, {"label" : "getTransitionModuleOrAction", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getTransitionModuleOrAction", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionModuleOrAction(x$1:Int):String", "kind" : "def"}, {"label" : "getTransitionModuleOrAction", "tail" : "(arg0: Int, arg1: Int): String", "member" : "simulator.SimulatorEngine.getTransitionModuleOrAction", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionModuleOrAction(x$1:Int,x$2:Int):String", "kind" : "def"}, {"label" : "getChoiceIndexOfTransition", "tail" : "(arg0: Int): Int", "member" : "simulator.SimulatorEngine.getChoiceIndexOfTransition", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getChoiceIndexOfTransition(x$1:Int):Int", "kind" : "def"}, {"label" : "getNumTransitions", "tail" : "(arg0: Int): Int", "member" : "simulator.SimulatorEngine.getNumTransitions", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getNumTransitions(x$1:Int):Int", "kind" : "def"}, {"label" : "getNumTransitions", "tail" : "(): Int", "member" : "simulator.SimulatorEngine.getNumTransitions", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getNumTransitions():Int", "kind" : "def"}, {"label" : "getNumChoices", "tail" : "(): Int", "member" : "simulator.SimulatorEngine.getNumChoices", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getNumChoices():Int", "kind" : "def"}, {"label" : "getTransitionListState", "tail" : "(): State", "member" : "simulator.SimulatorEngine.getTransitionListState", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionListState():parser.State", "kind" : "def"}, {"label" : "getTransitionList", "tail" : "(): TransitionList", "member" : "simulator.SimulatorEngine.getTransitionList", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getTransitionList():simulator.TransitionList", "kind" : "def"}, {"label" : "getIndexOfVar", "tail" : "(arg0: String): Int", "member" : "simulator.SimulatorEngine.getIndexOfVar", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getIndexOfVar(x$1:String):Int", "kind" : "def"}, {"label" : "getVariableType", "tail" : "(arg0: Int): Type", "member" : "simulator.SimulatorEngine.getVariableType", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getVariableType(x$1:Int):parser.type.Type", "kind" : "def"}, {"label" : "getVariableName", "tail" : "(arg0: Int): String", "member" : "simulator.SimulatorEngine.getVariableName", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getVariableName(x$1:Int):String", "kind" : "def"}, {"label" : "getNumVariables", "tail" : "(): Int", "member" : "simulator.SimulatorEngine.getNumVariables", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getNumVariables():Int", "kind" : "def"}, {"label" : "loadModulesFile", "tail" : "(arg0: ModulesFile): Unit", "member" : "simulator.SimulatorEngine.loadModulesFile", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loadModulesFile(x$1:parser.ast.ModulesFile):Unit", "kind" : "def"}, {"label" : "queryProperty", "tail" : "(arg0: Int): AnyRef", "member" : "simulator.SimulatorEngine.queryProperty", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryProperty(x$1:Int):Object", "kind" : "def"}, {"label" : "queryIsDeadlock", "tail" : "(arg0: Int): Boolean", "member" : "simulator.SimulatorEngine.queryIsDeadlock", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryIsDeadlock(x$1:Int):Boolean", "kind" : "def"}, {"label" : "queryIsDeadlock", "tail" : "(): Boolean", "member" : "simulator.SimulatorEngine.queryIsDeadlock", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryIsDeadlock():Boolean", "kind" : "def"}, {"label" : "queryIsInitial", "tail" : "(arg0: Int): Boolean", "member" : "simulator.SimulatorEngine.queryIsInitial", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryIsInitial(x$1:Int):Boolean", "kind" : "def"}, {"label" : "queryIsInitial", "tail" : "(): Boolean", "member" : "simulator.SimulatorEngine.queryIsInitial", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryIsInitial():Boolean", "kind" : "def"}, {"label" : "queryLabel", "tail" : "(arg0: Int, arg1: Int): Boolean", "member" : "simulator.SimulatorEngine.queryLabel", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryLabel(x$1:Int,x$2:Int):Boolean", "kind" : "def"}, {"label" : "queryLabel", "tail" : "(arg0: Int): Boolean", "member" : "simulator.SimulatorEngine.queryLabel", "link" : "edu\/stmc\/SimulatorEngineStratified.html#queryLabel(x$1:Int):Boolean", "kind" : "def"}, {"label" : "addProperty", "tail" : "(arg0: Expression, arg1: PropertiesFile): Int", "member" : "simulator.SimulatorEngine.addProperty", "link" : "edu\/stmc\/SimulatorEngineStratified.html#addProperty(x$1:parser.ast.Expression,x$2:parser.ast.PropertiesFile):Int", "kind" : "def"}, {"label" : "addProperty", "tail" : "(arg0: Expression): Int", "member" : "simulator.SimulatorEngine.addProperty", "link" : "edu\/stmc\/SimulatorEngineStratified.html#addProperty(x$1:parser.ast.Expression):Int", "kind" : "def"}, {"label" : "addLabel", "tail" : "(arg0: Expression, arg1: PropertiesFile): Int", "member" : "simulator.SimulatorEngine.addLabel", "link" : "edu\/stmc\/SimulatorEngineStratified.html#addLabel(x$1:parser.ast.Expression,x$2:parser.ast.PropertiesFile):Int", "kind" : "def"}, {"label" : "addLabel", "tail" : "(arg0: Expression): Int", "member" : "simulator.SimulatorEngine.addLabel", "link" : "edu\/stmc\/SimulatorEngineStratified.html#addLabel(x$1:parser.ast.Expression):Int", "kind" : "def"}, {"label" : "loadPath", "tail" : "(arg0: ModulesFile, arg1: PathFullInfo): Unit", "member" : "simulator.SimulatorEngine.loadPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loadPath(x$1:parser.ast.ModulesFile,x$2:simulator.PathFullInfo):Unit", "kind" : "def"}, {"label" : "loadStrategy", "tail" : "(arg0: Strategy): Unit", "member" : "simulator.SimulatorEngine.loadStrategy", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loadStrategy(x$1:strat.Strategy):Unit", "kind" : "def"}, {"label" : "loadReachableStates", "tail" : "(arg0: List[State]): Unit", "member" : "simulator.SimulatorEngine.loadReachableStates", "link" : "edu\/stmc\/SimulatorEngineStratified.html#loadReachableStates(x$1:java.util.List[parser.State]):Unit", "kind" : "def"}, {"label" : "computeTransitionsForCurrentState", "tail" : "(): Unit", "member" : "simulator.SimulatorEngine.computeTransitionsForCurrentState", "link" : "edu\/stmc\/SimulatorEngineStratified.html#computeTransitionsForCurrentState():Unit", "kind" : "def"}, {"label" : "computeTransitionsForStep", "tail" : "(arg0: Int): Unit", "member" : "simulator.SimulatorEngine.computeTransitionsForStep", "link" : "edu\/stmc\/SimulatorEngineStratified.html#computeTransitionsForStep(x$1:Int):Unit", "kind" : "def"}, {"label" : "removePrecedingStates", "tail" : "(arg0: Int): Unit", "member" : "simulator.SimulatorEngine.removePrecedingStates", "link" : "edu\/stmc\/SimulatorEngineStratified.html#removePrecedingStates(x$1:Int):Unit", "kind" : "def"}, {"label" : "backtrackTo", "tail" : "(arg0: Double): Unit", "member" : "simulator.SimulatorEngine.backtrackTo", "link" : "edu\/stmc\/SimulatorEngineStratified.html#backtrackTo(x$1:Double):Unit", "kind" : "def"}, {"label" : "backtrackTo", "tail" : "(arg0: Int): Unit", "member" : "simulator.SimulatorEngine.backtrackTo", "link" : "edu\/stmc\/SimulatorEngineStratified.html#backtrackTo(x$1:Int):Unit", "kind" : "def"}, {"label" : "automaticTransitions", "tail" : "(arg0: Double, arg1: Boolean): Int", "member" : "simulator.SimulatorEngine.automaticTransitions", "link" : "edu\/stmc\/SimulatorEngineStratified.html#automaticTransitions(x$1:Double,x$2:Boolean):Int", "kind" : "def"}, {"label" : "automaticTransitions", "tail" : "(arg0: Int, arg1: Boolean): Int", "member" : "simulator.SimulatorEngine.automaticTransitions", "link" : "edu\/stmc\/SimulatorEngineStratified.html#automaticTransitions(x$1:Int,x$2:Boolean):Int", "kind" : "def"}, {"label" : "automaticTransition", "tail" : "(): Boolean", "member" : "simulator.SimulatorEngine.automaticTransition", "link" : "edu\/stmc\/SimulatorEngineStratified.html#automaticTransition():Boolean", "kind" : "def"}, {"label" : "manualTransition", "tail" : "(arg0: Int, arg1: Double): Unit", "member" : "simulator.SimulatorEngine.manualTransition", "link" : "edu\/stmc\/SimulatorEngineStratified.html#manualTransition(x$1:Int,x$2:Double):Unit", "kind" : "def"}, {"label" : "manualTransition", "tail" : "(arg0: Int): Unit", "member" : "simulator.SimulatorEngine.manualTransition", "link" : "edu\/stmc\/SimulatorEngineStratified.html#manualTransition(x$1:Int):Unit", "kind" : "def"}, {"label" : "initialisePath", "tail" : "(arg0: State): Unit", "member" : "simulator.SimulatorEngine.initialisePath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#initialisePath(x$1:parser.State):Unit", "kind" : "def"}, {"label" : "createNewOnTheFlyPath", "tail" : "(arg0: ModulesFile): Unit", "member" : "simulator.SimulatorEngine.createNewOnTheFlyPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#createNewOnTheFlyPath(x$1:parser.ast.ModulesFile):Unit", "kind" : "def"}, {"label" : "createNewPath", "tail" : "(arg0: ModulesFile): Unit", "member" : "simulator.SimulatorEngine.createNewPath", "link" : "edu\/stmc\/SimulatorEngineStratified.html#createNewPath(x$1:parser.ast.ModulesFile):Unit", "kind" : "def"}, {"label" : "checkModelForSimulation", "tail" : "(arg0: ModulesFile): Unit", "member" : "simulator.SimulatorEngine.checkModelForSimulation", "link" : "edu\/stmc\/SimulatorEngineStratified.html#checkModelForSimulation(x$1:parser.ast.ModulesFile):Unit", "kind" : "def"}, {"label" : "getSettings", "tail" : "(): PrismSettings", "member" : "prism.PrismComponent.getSettings", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getSettings():prism.PrismSettings", "kind" : "def"}, {"label" : "getLog", "tail" : "(): PrismLog", "member" : "prism.PrismComponent.getLog", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getLog():prism.PrismLog", "kind" : "def"}, {"label" : "setSettings", "tail" : "(arg0: PrismSettings): Unit", "member" : "prism.PrismComponent.setSettings", "link" : "edu\/stmc\/SimulatorEngineStratified.html#setSettings(x$1:prism.PrismSettings):Unit", "kind" : "final def"}, {"label" : "setLog", "tail" : "(arg0: PrismLog): Unit", "member" : "prism.PrismComponent.setLog", "link" : "edu\/stmc\/SimulatorEngineStratified.html#setLog(x$1:prism.PrismLog):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "edu\/stmc\/SimulatorEngineStratified.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "edu\/stmc\/SimulatorEngineStratified.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "edu\/stmc\/SimulatorEngineStratified.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "edu\/stmc\/SimulatorEngineStratified.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "edu\/stmc\/SimulatorEngineStratified.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "edu\/stmc\/SimulatorEngineStratified.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "edu\/stmc\/SimulatorEngineStratified.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/SimulatorEngineStratified.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/SimulatorEngineStratified.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "edu\/stmc\/SimulatorEngineStratified.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "edu\/stmc\/SimulatorEngineStratified.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "edu\/stmc\/SimulatorEngineStratified.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "edu\/stmc\/SimulatorEngineStratified.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "edu\/stmc\/SimulatorEngineStratified.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "edu\/stmc\/SimulatorEngineStratified.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "edu\/stmc\/SimulatorEngineStratified.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "edu\/stmc\/SimulatorEngineStratified.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "edu\/stmc\/SimulatorEngineStratified.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "edu\/stmc\/SimulatorEngineStratified.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "edu\/stmc\/SimulatorEngineStratified.html", "kind" : "class"}]};